from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fleet_management_api.models.base_model import Model
from fleet_management_api.models.gnss_position import GNSSPosition
import re
from fleet_management_api import util

from fleet_management_api.models.gnss_position import GNSSPosition  # noqa: E501
import re  # noqa: E501

class RouteVisualization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, route_id=None, hexcolor='#FF0000', points=[]):  # noqa: E501
        """RouteVisualization - a model defined in OpenAPI

        :param id: The id of this RouteVisualization.  # noqa: E501
        :type id: int
        :param route_id: The route_id of this RouteVisualization.  # noqa: E501
        :type route_id: int
        :param hexcolor: The hexcolor of this RouteVisualization.  # noqa: E501
        :type hexcolor: str
        :param points: The points of this RouteVisualization.  # noqa: E501
        :type points: List[GNSSPosition]
        """
        self.openapi_types = {
            'id': int,
            'route_id': int,
            'hexcolor': str,
            'points': List[GNSSPosition]
        }

        self.attribute_map = {
            'id': 'id',
            'route_id': 'routeId',
            'hexcolor': 'hexcolor',
            'points': 'points'
        }

        self._id = id
        self._route_id = route_id
        self._hexcolor = hexcolor
        self._points = points

    @classmethod
    def from_dict(cls, dikt) -> 'RouteVisualization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RouteVisualization of this RouteVisualization.  # noqa: E501
        :rtype: RouteVisualization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this RouteVisualization.


        :return: The id of this RouteVisualization.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this RouteVisualization.


        :param id: The id of this RouteVisualization.
        :type id: int
        """

        self._id = id

    @property
    def route_id(self) -> int:
        """Gets the route_id of this RouteVisualization.


        :return: The route_id of this RouteVisualization.
        :rtype: int
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id: int):
        """Sets the route_id of this RouteVisualization.


        :param route_id: The route_id of this RouteVisualization.
        :type route_id: int
        """
        if route_id is None:
            raise ValueError("Invalid value for `route_id`, must not be `None`")  # noqa: E501

        self._route_id = route_id

    @property
    def hexcolor(self) -> str:
        """Gets the hexcolor of this RouteVisualization.

        Color in hexadecimal format.  # noqa: E501

        :return: The hexcolor of this RouteVisualization.
        :rtype: str
        """
        return self._hexcolor

    @hexcolor.setter
    def hexcolor(self, hexcolor: str):
        """Sets the hexcolor of this RouteVisualization.

        Color in hexadecimal format.  # noqa: E501

        :param hexcolor: The hexcolor of this RouteVisualization.
        :type hexcolor: str
        """
        if hexcolor is not None and not re.search(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$', hexcolor):  # noqa: E501
            raise ValueError("Invalid value for `hexcolor`, must be a follow pattern or equal to `/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/`")  # noqa: E501

        self._hexcolor = hexcolor

    @property
    def points(self) -> List[GNSSPosition]:
        """Gets the points of this RouteVisualization.


        :return: The points of this RouteVisualization.
        :rtype: List[GNSSPosition]
        """
        return self._points

    @points.setter
    def points(self, points: List[GNSSPosition]):
        """Sets the points of this RouteVisualization.


        :param points: The points of this RouteVisualization.
        :type points: List[GNSSPosition]
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points
