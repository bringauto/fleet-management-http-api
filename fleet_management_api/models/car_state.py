from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fleet_management_api.models.base_model import Model
from fleet_management_api.models.car_status import CarStatus
from fleet_management_api.models.gnss_position import GNSSPosition
from fleet_management_api import util

from fleet_management_api.models.car_status import CarStatus  # noqa: E501
from fleet_management_api.models.gnss_position import GNSSPosition  # noqa: E501

class CarState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, status=None, fuel=None, car_id=None, speed=None, position=None):  # noqa: E501
        """CarState - a model defined in OpenAPI

        :param id: The id of this CarState.  # noqa: E501
        :type id: int
        :param status: The status of this CarState.  # noqa: E501
        :type status: CarStatus
        :param fuel: The fuel of this CarState.  # noqa: E501
        :type fuel: int
        :param car_id: The car_id of this CarState.  # noqa: E501
        :type car_id: int
        :param speed: The speed of this CarState.  # noqa: E501
        :type speed: float
        :param position: The position of this CarState.  # noqa: E501
        :type position: GNSSPosition
        """
        self.openapi_types = {
            'id': int,
            'status': CarStatus,
            'fuel': int,
            'car_id': int,
            'speed': float,
            'position': GNSSPosition
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'fuel': 'fuel',
            'car_id': 'carId',
            'speed': 'speed',
            'position': 'position'
        }

        self._id = id
        self._status = status
        self._fuel = fuel
        self._car_id = car_id
        self._speed = speed
        self._position = position

    @classmethod
    def from_dict(cls, dikt) -> 'CarState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CarState of this CarState.  # noqa: E501
        :rtype: CarState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this CarState.


        :return: The id of this CarState.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this CarState.


        :param id: The id of this CarState.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self) -> CarStatus:
        """Gets the status of this CarState.


        :return: The status of this CarState.
        :rtype: CarStatus
        """
        return self._status

    @status.setter
    def status(self, status: CarStatus):
        """Sets the status of this CarState.


        :param status: The status of this CarState.
        :type status: CarStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def fuel(self) -> int:
        """Gets the fuel of this CarState.


        :return: The fuel of this CarState.
        :rtype: int
        """
        return self._fuel

    @fuel.setter
    def fuel(self, fuel: int):
        """Sets the fuel of this CarState.


        :param fuel: The fuel of this CarState.
        :type fuel: int
        """

        self._fuel = fuel

    @property
    def car_id(self) -> int:
        """Gets the car_id of this CarState.


        :return: The car_id of this CarState.
        :rtype: int
        """
        return self._car_id

    @car_id.setter
    def car_id(self, car_id: int):
        """Sets the car_id of this CarState.


        :param car_id: The car_id of this CarState.
        :type car_id: int
        """
        if car_id is None:
            raise ValueError("Invalid value for `car_id`, must not be `None`")  # noqa: E501

        self._car_id = car_id

    @property
    def speed(self) -> float:
        """Gets the speed of this CarState.


        :return: The speed of this CarState.
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed: float):
        """Sets the speed of this CarState.


        :param speed: The speed of this CarState.
        :type speed: float
        """

        self._speed = speed

    @property
    def position(self) -> GNSSPosition:
        """Gets the position of this CarState.


        :return: The position of this CarState.
        :rtype: GNSSPosition
        """
        return self._position

    @position.setter
    def position(self, position: GNSSPosition):
        """Sets the position of this CarState.


        :param position: The position of this CarState.
        :type position: GNSSPosition
        """

        self._position = position
