from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fleet_management_api.models.base_model import Model
from fleet_management_api.models.order_status import OrderStatus
from fleet_management_api import util

from fleet_management_api.models.order_status import OrderStatus  # noqa: E501

class OrderState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, status=None, order_id=None, timestamp=None):  # noqa: E501
        """OrderState - a model defined in OpenAPI

        :param id: The id of this OrderState.  # noqa: E501
        :type id: int
        :param status: The status of this OrderState.  # noqa: E501
        :type status: OrderStatus
        :param order_id: The order_id of this OrderState.  # noqa: E501
        :type order_id: int
        :param timestamp: The timestamp of this OrderState.  # noqa: E501
        :type timestamp: int
        """
        self.openapi_types = {
            'id': int,
            'status': OrderStatus,
            'order_id': int,
            'timestamp': int
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'order_id': 'orderId',
            'timestamp': 'timestamp'
        }

        self._id = id
        self._status = status
        self._order_id = order_id
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'OrderState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrderState of this OrderState.  # noqa: E501
        :rtype: OrderState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this OrderState.


        :return: The id of this OrderState.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this OrderState.


        :param id: The id of this OrderState.
        :type id: int
        """

        self._id = id

    @property
    def status(self) -> OrderStatus:
        """Gets the status of this OrderState.


        :return: The status of this OrderState.
        :rtype: OrderStatus
        """
        return self._status

    @status.setter
    def status(self, status: OrderStatus):
        """Sets the status of this OrderState.


        :param status: The status of this OrderState.
        :type status: OrderStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def order_id(self) -> int:
        """Gets the order_id of this OrderState.


        :return: The order_id of this OrderState.
        :rtype: int
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id: int):
        """Sets the order_id of this OrderState.


        :param order_id: The order_id of this OrderState.
        :type order_id: int
        """
        if order_id is None:
            raise ValueError("Invalid value for `order_id`, must not be `None`")  # noqa: E501

        self._order_id = order_id

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this OrderState.

        Unix timestamp in milliseconds  # noqa: E501

        :return: The timestamp of this OrderState.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this OrderState.

        Unix timestamp in milliseconds  # noqa: E501

        :param timestamp: The timestamp of this OrderState.
        :type timestamp: int
        """

        self._timestamp = timestamp
