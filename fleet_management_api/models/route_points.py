from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fleet_management_api.models.base_model import Model
from fleet_management_api.models.gnss_position import GNSSPosition
from fleet_management_api import util

from fleet_management_api.models.gnss_position import GNSSPosition  # noqa: E501

class RoutePoints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, route_id=None, points=[]):  # noqa: E501
        """RoutePoints - a model defined in OpenAPI

        :param route_id: The route_id of this RoutePoints.  # noqa: E501
        :type route_id: int
        :param points: The points of this RoutePoints.  # noqa: E501
        :type points: List[GNSSPosition]
        """
        self.openapi_types = {
            'route_id': int,
            'points': List[GNSSPosition]
        }

        self.attribute_map = {
            'route_id': 'routeId',
            'points': 'points'
        }

        self._route_id = route_id
        self._points = points

    @classmethod
    def from_dict(cls, dikt) -> 'RoutePoints':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RoutePoints of this RoutePoints.  # noqa: E501
        :rtype: RoutePoints
        """
        return util.deserialize_model(dikt, cls)

    @property
    def route_id(self) -> int:
        """Gets the route_id of this RoutePoints.


        :return: The route_id of this RoutePoints.
        :rtype: int
        """
        return self._route_id

    @route_id.setter
    def route_id(self, route_id: int):
        """Sets the route_id of this RoutePoints.


        :param route_id: The route_id of this RoutePoints.
        :type route_id: int
        """
        if route_id is None:
            raise ValueError("Invalid value for `route_id`, must not be `None`")  # noqa: E501

        self._route_id = route_id

    @property
    def points(self) -> List[GNSSPosition]:
        """Gets the points of this RoutePoints.


        :return: The points of this RoutePoints.
        :rtype: List[GNSSPosition]
        """
        return self._points

    @points.setter
    def points(self, points: List[GNSSPosition]):
        """Sets the points of this RoutePoints.


        :param points: The points of this RoutePoints.
        :type points: List[GNSSPosition]
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")  # noqa: E501

        self._points = points
