from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fleet_management_api.models.base_model import Model
from fleet_management_api.models.gnss_position import GNSSPosition
from fleet_management_api.models.mobile_phone import MobilePhone
from fleet_management_api import util

from fleet_management_api.models.gnss_position import GNSSPosition  # noqa: E501
from fleet_management_api.models.mobile_phone import MobilePhone  # noqa: E501

class Stop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, position=None, notification_phone=None):  # noqa: E501
        """Stop - a model defined in OpenAPI

        :param id: The id of this Stop.  # noqa: E501
        :type id: int
        :param name: The name of this Stop.  # noqa: E501
        :type name: str
        :param position: The position of this Stop.  # noqa: E501
        :type position: GNSSPosition
        :param notification_phone: The notification_phone of this Stop.  # noqa: E501
        :type notification_phone: MobilePhone
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'position': GNSSPosition,
            'notification_phone': MobilePhone
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'position': 'position',
            'notification_phone': 'notificationPhone'
        }

        self._id = id
        self._name = name
        self._position = position
        self._notification_phone = notification_phone

    @classmethod
    def from_dict(cls, dikt) -> 'Stop':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Stop of this Stop.  # noqa: E501
        :rtype: Stop
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Stop.


        :return: The id of this Stop.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Stop.


        :param id: The id of this Stop.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Stop.


        :return: The name of this Stop.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Stop.


        :param name: The name of this Stop.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def position(self) -> GNSSPosition:
        """Gets the position of this Stop.


        :return: The position of this Stop.
        :rtype: GNSSPosition
        """
        return self._position

    @position.setter
    def position(self, position: GNSSPosition):
        """Sets the position of this Stop.


        :param position: The position of this Stop.
        :type position: GNSSPosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def notification_phone(self) -> MobilePhone:
        """Gets the notification_phone of this Stop.


        :return: The notification_phone of this Stop.
        :rtype: MobilePhone
        """
        return self._notification_phone

    @notification_phone.setter
    def notification_phone(self, notification_phone: MobilePhone):
        """Sets the notification_phone of this Stop.


        :param notification_phone: The notification_phone of this Stop.
        :type notification_phone: MobilePhone
        """

        self._notification_phone = notification_phone
