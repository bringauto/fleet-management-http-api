openapi: 3.0.0
info:
  contact:
    email: fleet@bringauto.com
    name: BringAuto s.r.o
    url: https://bringauto.com
  description: Specification for BringAuto fleet backend HTTP API
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  title: BringAuto Fleet Management v2 API
  version: 3.0.0
servers:
- url: /v2/management
security:
- APIKeyAuth: []
- oAuth2AuthCode: []
tags:
- description: API health check
  name: api
- description: Car related functions
  name: car
- description: Car state-related functions
  name: carState
- description: Order-related functions
  name: order
- description: Order state-related functions
  name: orderState
- description: Platform hardware-related functions
  name: platformHW
- description: Route state-related functions
  name: route
- description: Stop state-related functions
  name: stop
- description: Authentication-related functions
  name: security
paths:
  /apialive:
    head:
      operationId: check_api_is_alive
      responses:
        "200":
          content:
            text/plain: {}
          description: The HTTP server has been reached successfully.
        "503":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "503"
                    message: Service unavailable
              schema:
                $ref: '#/components/schemas/Error'
          description: Service unavailable
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Check HTTP server is running and accessible.
      tags:
      - api
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.api_check
  /car:
    get:
      operationId: get_cars
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 1
                platformHWId: 5
                name: BAT-2022-01
                carAdminPhone:
                  phone: "+420123456789"
                defaultRouteId: 1
                underTest: false
              schema:
                items:
                  $ref: '#/components/schemas/Car'
                type: array
          description: All the currently existing Cars have been returned.
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find and return all existing Cars.
      tags:
      - car
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
    post:
      operationId: create_cars
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Car'
              type: array
        description: A list of Car models in JSON format.
        required: true
        x-body-name: car
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Car'
                type: array
          description: The Cars have been successfully created.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create new Car objects.
      tags:
      - car
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
    put:
      operationId: update_cars
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Car'
              type: array
        description: JSON representation of a list of the Cars with updated data.
        required: true
        x-body-name: car
      responses:
        "200":
          content:
            text/plain: {}
          description: The Cars have been successfully updated.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update already existing Cars.
      tags:
      - car
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
  /car/{carId}:
    delete:
      operationId: delete_car
      parameters:
      - description: The ID of the Car to be deleted.
        example: 1
        in: path
        name: carId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            text/plain:
              example: 2 cars were successfully removed.
          description: The Car has been successfully deleted.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "405":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "405"
                    message: Method not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Method not allowed
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a Car identified by its ID.
      tags:
      - car
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
    get:
      operationId: get_car
      parameters:
      - description: An ID of the Car to be returned.
        example: 1
        in: path
        name: carId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
          description: The Car with the specified ID has been found and returned.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find a single Car by its ID.
      tags:
      - car
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
  /carstate:
    get:
      operationId: get_all_car_states
      parameters:
      - description: "Applies to GET methods when no objects would be returned at\
          \ the moment of request. If wait=true, \\ the request will wait for the\
          \ next object to be created and then returns it. If wait=False or unspecified,\
          \ the request will return \\ an empty list."
        in: query
        name: wait
        schema:
          default: false
          type: boolean
      - description: "A Unix timestamp in milliseconds. If specified, only objects\
          \ created at the time or later will be returned. If unspecified, all objects\
          \ are returned (since is set to 0 in that case)."
        in: query
        name: since
        schema:
          format: int64
          type: integer
      - description: "If specified, only the last N objects will be returned. If unspecified,\
          \ all objects are returned. \\ If some states have identical timestamps\
          \ and they all do not fit into the maximum N states, only those with higher\
          \ IDs are returned. If value smaller than 1 is provided, this filtering\
          \ is ignored."
        in: query
        name: lastN
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CarState'
                type: array
          description: Successfully found all Car States complying with the request
            parameters.
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find one or all Car States for all existing Cars.
      tags:
      - carState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
    post:
      operationId: create_car_states
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/CarState'
              type: array
        description: A list of Car State model in JSON format.
        required: true
        x-body-name: carState
      responses:
        "200":
          content:
            text/plain: {}
          description: The new Car States have been successfully added.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add new Car States.
      tags:
      - carState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
  /carstate/{carId}:
    get:
      operationId: get_car_states
      parameters:
      - description: "Applies to GET methods when no objects would be returned at\
          \ the moment of request. If wait=true, \\ the request will wait for the\
          \ next object to be created and then returns it. If wait=False or unspecified,\
          \ the request will return \\ an empty list."
        in: query
        name: wait
        schema:
          default: false
          type: boolean
      - description: "A Unix timestamp in milliseconds. If specified, only objects\
          \ created at the time or later will be returned. If unspecified, all objects\
          \ are returned (since is set to 0 in that case)."
        in: query
        name: since
        schema:
          format: int64
          type: integer
      - description: "If specified, only the last N objects will be returned. If unspecified,\
          \ all objects are returned. \\ If some states have identical timestamps\
          \ and they all do not fit into the maximum N states, only those with higher\
          \ IDs are returned. If value smaller than 1 is provided, this filtering\
          \ is ignored."
        in: query
        name: lastN
        schema:
          default: 0
          format: int32
          type: integer
      - description: ID of the Car for which to find the Car States.
        example: 1
        in: path
        name: carId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CarState'
                type: array
          description: Successfully found all Car States complying with the request
            parameters.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find one or all Car States for a Car with given ID.
      tags:
      - carState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
  /login:
    get:
      description: Login using Keycloak.
      operationId: login
      responses:
        "302":
          description: Redirect to the Keycloak authentication.
        "500":
          description: The login failed due to an internal server error.
      security: []
      tags:
      - security
      x-openapi-router-controller: fleet_management_api.api_impl.auth_controller
  /order:
    get:
      operationId: get_orders
      parameters:
      - description: "A Unix timestamp in milliseconds. If specified, only objects\
          \ created at the time or later will be returned. If unspecified, all objects\
          \ are returned (since is set to 0 in that case)."
        in: query
        name: since
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              example:
              - priority: normal
                userId: 1
                carId: 1
                timestamp: 1713256508978
                targetStopId: 1
                notification: Order notification
                stopRouteId: 1
                notificationPhone:
                  phone: "+420123456789"
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: All the currently existing Orders have been sorted by their
            creation timestamp from the oldest to newest and returned.
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find all currently existing Orders.
      tags:
      - order
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
    post:
      operationId: create_orders
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Order'
              type: array
        description: A list of Order models in JSON format.
        required: true
        x-body-name: order
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: The new Orders have been successfully created.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create new Orders.
      tags:
      - order
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
  /order/{carId}:
    get:
      operationId: get_car_orders
      parameters:
      - description: "A Unix timestamp in milliseconds. If specified, only objects\
          \ created at the time or later will be returned. If unspecified, all objects\
          \ are returned (since is set to 0 in that case)."
        in: query
        name: since
        schema:
          format: int64
          type: integer
      - description: ID of the Car for which Orders shall be returned.
        example: 1
        in: path
        name: carId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: "The Orders assigned to the Car with the given ID have been\
            \ found, sorted by their creation timestamp from oldest to newest and\
            \ returned."
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find existing Orders by the corresponding Car ID and return them.
      tags:
      - order
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
  /order/{carId}/{orderId}:
    delete:
      operationId: delete_order
      parameters:
      - description: ID of the Car to which the Order is assigned.
        example: 1
        in: path
        name: carId
        required: true
        schema:
          format: int32
          type: integer
      - description: ID of the Order to be returned.
        example: 1
        in: path
        name: orderId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            text/plain: {}
          description: The Order with the specified ID has been successfully deleted.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "405":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "405"
                    message: Method not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Method not allowed
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete an Order identified by its ID and ID of a car to which it is
        assigned.
      tags:
      - order
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
    get:
      operationId: get_order
      parameters:
      - description: ID of the Car to which the Order is assigned.
        example: 1
        in: path
        name: carId
        required: true
        schema:
          format: int32
          type: integer
      - description: ID of the Order to be returned.
        example: 1
        in: path
        name: orderId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: The Order with the specified car ID and order ID has been found
            and returned.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find an existing Order by the car ID and the order ID and return it.
      tags:
      - order
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
  /orderstate:
    get:
      operationId: get_all_order_states
      parameters:
      - description: "Applies to GET methods when no objects would be returned at\
          \ the moment of request. If wait=true, \\ the request will wait for the\
          \ next object to be created and then returns it. If wait=False or unspecified,\
          \ the request will return \\ an empty list."
        in: query
        name: wait
        schema:
          default: false
          type: boolean
      - description: "A Unix timestamp in milliseconds. If specified, only objects\
          \ created at the time or later will be returned. If unspecified, all objects\
          \ are returned (since is set to 0 in that case)."
        in: query
        name: since
        schema:
          format: int64
          type: integer
      - description: "If specified, only the last N objects will be returned. If unspecified,\
          \ all objects are returned. \\ If some states have identical timestamps\
          \ and they all do not fit into the maximum N states, only those with higher\
          \ IDs are returned. If value smaller than 1 is provided, this filtering\
          \ is ignored."
        in: query
        name: lastN
        schema:
          default: 0
          format: int32
          type: integer
      - description: An optional parameter for filtering only objects related to a
          car with the specified ID.
        in: query
        name: carId
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        "200":
          content:
            application/json:
              example:
              - orderId: 1
                status: accepted
                carId: 1
              schema:
                items:
                  $ref: '#/components/schemas/OrderState'
                type: array
          description: Successfully found all Order States complying with the request
            parameters.
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find Order States for all existing Orders.
      tags:
      - orderState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order_state
    post:
      operationId: create_order_states
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/OrderState'
              type: array
        description: A list of Order States model in JSON format.
        required: true
        x-body-name: orderState
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderState'
          description: The new Order State has been successfully posted.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Add new Order States.
      tags:
      - orderState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order_state
  /orderstate/{orderId}:
    get:
      operationId: get_order_states
      parameters:
      - description: ID of the Order for which to find the Order States.
        example: 1
        in: path
        name: orderId
        required: true
        schema:
          format: int32
          type: integer
      - description: "Applies to GET methods when no objects would be returned at\
          \ the moment of request. If wait=true, \\ the request will wait for the\
          \ next object to be created and then returns it. If wait=False or unspecified,\
          \ the request will return \\ an empty list."
        in: query
        name: wait
        schema:
          default: false
          type: boolean
      - description: "A Unix timestamp in milliseconds. If specified, only objects\
          \ created at the time or later will be returned. If unspecified, all objects\
          \ are returned (since is set to 0 in that case)."
        in: query
        name: since
        schema:
          format: int64
          type: integer
      - description: "If specified, only the last N objects will be returned. If unspecified,\
          \ all objects are returned. \\ If some states have identical timestamps\
          \ and they all do not fit into the maximum N states, only those with higher\
          \ IDs are returned. If value smaller than 1 is provided, this filtering\
          \ is ignored."
        in: query
        name: lastN
        schema:
          default: 0
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrderState'
                type: array
          description: "Order States for the Order specified by its ID have been found,\
            \ sorted by their creation timestamp \\ from the oldest to the newest\
            \ and returned."
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find all Order States for a particular Order specified by its ID.
      tags:
      - orderState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order_state
  /platformhw:
    get:
      operationId: get_hws
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 1
                name: ABCD1234EF56
              schema:
                items:
                  $ref: '#/components/schemas/PlatformHW'
                type: array
          description: All the currently existing Platform HW have been returned.
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find and return all existing Platform HW.
      tags:
      - platformHW
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hw
    post:
      operationId: create_hws
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/PlatformHW'
              type: array
        description: Platform HW model in JSON format.
        required: true
        x-body-name: platformHW
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHW'
          description: The Platform HW has been successfully created.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a new Platform HW object.
      tags:
      - platformHW
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hw
  /platformhw/{platformHwId}:
    delete:
      operationId: delete_hw
      parameters:
      - description: ID of Platform HW to delete.
        example: 1
        in: path
        name: platformHwId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            text/plain: {}
          description: The Platform HW with the specified ID has been deleted.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "405":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "405"
                    message: Method not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Method not allowed
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete Platform HW with the given ID.
      tags:
      - platformHW
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hw
    get:
      operationId: get_hw
      parameters:
      - description: ID of the Platform HW to return.
        example: 1
        in: path
        name: platformHwId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHW'
          description: The Platform HW with the specified ID has been found and returned.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find Platform HW with the given ID.
      tags:
      - platformHW
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hw
  /route:
    get:
      operationId: get_routes
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 1
                name: Lužánky
                stopIds:
                - 1
                - 2
                - 3
                - 4
              schema:
                items:
                  $ref: '#/components/schemas/Route'
                type: array
          description: All the currently existing Routes have been returned.
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find and return all existing Routes.
      tags:
      - route
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
    post:
      operationId: create_routes
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Route'
              type: array
        description: A list of Route models in JSON format.
        required: true
        x-body-name: route
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Route'
                type: array
          description: The Routes have been successfully created.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create new Routes.
      tags:
      - route
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
    put:
      operationId: update_routes
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Route'
              type: array
        description: JSON representation of a list of the Routes with updated data.
        required: true
        x-body-name: route
      responses:
        "200":
          content:
            text/plain: {}
          description: The Routes have been successfully updated.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update already existing Routes.
      tags:
      - route
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
  /route-visualization:
    post:
      operationId: redefine_route_visualizations
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/RouteVisualization'
              type: array
        description: A list of Route Visualization models in JSON format.
        required: true
        x-body-name: RouteVisualization
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteVisualization'
          description: The Route Visualizations have been successfully redefined.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Redefine Route Visualizations for existing Routes.
      tags:
      - route
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route_visualization
  /route-visualization/{routeId}:
    get:
      operationId: get_route_visualization
      parameters:
      - description: An ID a the Route
        example: 1
        in: path
        name: routeId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteVisualization'
          description: The Route Visualization for the specified Route ID has been
            found and returned.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find Route Visualization for a Route identified by the route's ID.
      tags:
      - route
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route_visualization
  /route/{routeId}:
    delete:
      operationId: delete_route
      parameters:
      - description: An ID a the Route
        example: 1
        in: path
        name: routeId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            text/plain: {}
          description: The Route with the specified ID has been deleted.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "405":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "405"
                    message: Method not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Method not allowed
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a Route with the specified ID.
      tags:
      - route
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
    get:
      operationId: get_route
      parameters:
      - description: An ID a the Route
        example: 1
        in: path
        name: routeId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
          description: The Route with the specified ID has been found and returned.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find a single Route with the specified ID.
      tags:
      - route
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
  /stop:
    get:
      operationId: get_stops
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 1
                name: Lidická
                position:
                  latitude: 49.204117
                  longitude: 16.606525
                  altitude: 400.25
                notificationPhone:
                  phone: "+420123456789"
              schema:
                items:
                  $ref: '#/components/schemas/Stop'
                type: array
          description: All the currently existing Stops have been returned.
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find and return all existing Stops.
      tags:
      - stop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
    post:
      operationId: create_stops
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Stop'
              type: array
        description: A list of Stop models in JSON format.
        required: true
        x-body-name: stop
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Stop'
                type: array
          description: The Stops have been successfully created.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create new Stops.
      tags:
      - stop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
    put:
      operationId: update_stops
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/Stop'
              type: array
        description: JSON representation of a list of the Stops with updated data.
        required: true
        x-body-name: stop
      responses:
        "200":
          content:
            text/plain: {}
          description: The Stops have been successfully updated.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update already existing Stops.
      tags:
      - stop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
  /stop/{stopId}:
    delete:
      operationId: delete_stop
      parameters:
      - description: ID of the Stop to be deleted.
        example: 1
        in: path
        name: stopId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            text/plain: {}
          description: The Stop with the specified ID has been deleted.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        "405":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "405"
                    message: Method not allowed
              schema:
                $ref: '#/components/schemas/Error'
          description: Method not allowed
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete a Stop with the specified ID.
      tags:
      - stop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
    get:
      operationId: get_stop
      parameters:
      - description: ID of Stop to be returned.
        example: 1
        in: path
        name: stopId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
          description: The Stop with the specified ID has been found and returned.
        "400":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "400"
                    message: Bad request
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "401"
                    message: Unauthorized
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "403"
                    message: Request forbidden
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "404"
                    message: Resource not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found
        default:
          content:
            application/json:
              examples:
                error:
                  value:
                    code: "500"
                    message: Unexpected error
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Find and return a single Stop by its ID.
      tags:
      - stop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
  /token_get:
    get:
      description: Callback endpoint for the Keycloak to receive JWT token.
      operationId: token_get
      parameters:
      - description: State returned by the Keycloak authentication.
        example: your_state_info
        explode: true
        in: query
        name: state
        required: false
        schema:
          type: string
        style: form
      - description: Session state returned by the Keycloak authentication.
        example: 167e141d-2f55-4d...
        explode: true
        in: query
        name: session_state
        required: false
        schema:
          type: string
        style: form
      - description: Code issuer returned by the Keycloak authentication.
        example: http%3A%2F%2Flocalhost%3A8081%2Frealms%2Fmaster
        explode: true
        in: query
        name: iss
        required: false
        schema:
          type: string
        style: form
      - description: Code used for JWT token generation returned by Keycloak authentication.
        example: 5dea27d2-4b2d-48...
        explode: true
        in: query
        name: code
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Returns a standard Keycloak token.
        "500":
          description: The login failed due to an internal server error.
      security: []
      tags:
      - security
      x-openapi-router-controller: fleet_management_api.api_impl.auth_controller
  /token_refresh:
    get:
      description: Endpoint to receive JWT token from refresh token.
      operationId: token_refresh
      parameters:
      - description: Refresh token used for JWT token generation.
        example: eyJhbGciOiJIUzI1NiIsI...
        explode: true
        in: query
        name: refresh_token
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Returns a new standard Keycloak token.
        "500":
          description: Token refresh failed due to an internal server error.
      security: []
      tags:
      - security
      x-openapi-router-controller: fleet_management_api.api_impl.auth_controller
components:
  parameters:
    Wait:
      description: "Applies to GET methods when no objects would be returned at the\
        \ moment of request. If wait=true, \\ the request will wait for the next object\
        \ to be created and then returns it. If wait=False or unspecified, the request\
        \ will return \\ an empty list."
      in: query
      name: wait
      schema:
        default: false
        type: boolean
    Since:
      description: "A Unix timestamp in milliseconds. If specified, only objects created\
        \ at the time or later will be returned. If unspecified, all objects are returned\
        \ (since is set to 0 in that case)."
      in: query
      name: since
      schema:
        format: int64
        type: integer
    LastN:
      description: "If specified, only the last N objects will be returned. If unspecified,\
        \ all objects are returned. \\ If some states have identical timestamps and\
        \ they all do not fit into the maximum N states, only those with higher IDs\
        \ are returned. If value smaller than 1 is provided, this filtering is ignored."
      in: query
      name: lastN
      schema:
        default: 0
        format: int32
        type: integer
    CarId:
      description: An optional parameter for filtering only objects related to a car
        with the specified ID.
      in: query
      name: carId
      schema:
        $ref: '#/components/schemas/Id'
    RouteId:
      description: An ID a the Route
      example: 1
      in: path
      name: routeId
      required: true
      schema:
        format: int32
        type: integer
  responses:
    ServiceUnavailable:
      content:
        application/json:
          examples:
            error:
              value:
                code: "503"
                message: Service unavailable
          schema:
            $ref: '#/components/schemas/Error'
      description: Service unavailable
    UnexpectedError:
      content:
        application/json:
          examples:
            error:
              value:
                code: "500"
                message: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
      description: Unexpected error
    Unauthorized:
      content:
        application/json:
          examples:
            error:
              value:
                code: "401"
                message: Unauthorized
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized
    Forbidden:
      content:
        application/json:
          examples:
            error:
              value:
                code: "403"
                message: Request forbidden
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden
    BadRequest:
      content:
        application/json:
          examples:
            error:
              value:
                code: "400"
                message: Bad request
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request
    NotFound:
      content:
        application/json:
          examples:
            error:
              value:
                code: "404"
                message: Resource not found
          schema:
            $ref: '#/components/schemas/Error'
      description: Not found
    MethodNotAllowed:
      content:
        application/json:
          examples:
            error:
              value:
                code: "405"
                message: Method not allowed
          schema:
            $ref: '#/components/schemas/Error'
      description: Method not allowed
  schemas:
    Error:
      description: Error object structure.
      properties:
        code:
          example: 404
          title: code
          type: integer
        message:
          example: Not found
          title: message
          type: string
      required:
      - code
      - message
      title: Error
      type: object
    Car:
      description: Car model structure.
      example:
        underTest: false
        name: BAT-2022-01
        defaultRouteId: 1
        id: 1
        carAdminPhone:
          phone: "+420123456789"
        lastState:
          fuel: 80
          id: 1
          position:
            altitude: 400.25
            latitude: 49.204117
            longitude: 16.606525
          speed: 20.5
          timestamp: 1616425275913
          status: idle
          carId: 1
        platformHwId: 1
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        platformHwId:
          example: 1
          format: int32
          title: Id
          type: integer
        name:
          example: BAT-2022-01
          title: name
          type: string
        carAdminPhone:
          $ref: '#/components/schemas/MobilePhone'
        defaultRouteId:
          example: 1
          format: int32
          title: Id
          type: integer
        underTest:
          default: true
          example: false
          title: underTest
          type: boolean
        lastState:
          $ref: '#/components/schemas/CarState'
      required:
      - carAdminPhone
      - name
      - platformHwId
      title: Car
      type: object
    CarState:
      description: Car State object structure
      example:
        fuel: 80
        id: 1
        position:
          altitude: 400.25
          latitude: 49.204117
          longitude: 16.606525
        speed: 20.5
        timestamp: 1616425275913
        status: idle
        carId: 1
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        timestamp:
          description: A Unix timestamp in milliseconds. The timestamp is used to
            determine the time of creation of an object.
          example: 1616425275913
          format: int64
          title: Timestamp
          type: integer
        status:
          $ref: '#/components/schemas/CarStatus'
        fuel:
          default: 0
          example: 80
          format: int32
          title: fuel
          type: integer
        carId:
          example: 1
          format: int32
          title: Id
          type: integer
        speed:
          default: 0.0
          example: 20.5
          format: float
          title: speed
          type: number
        position:
          $ref: '#/components/schemas/GNSSPosition'
      required:
      - carId
      - status
      title: CarState
      type: object
    CarStatus:
      description: Car Status enum
      enum:
      - idle
      - charging
      - out_of_order
      - driving
      - in_stop
      - paused_by_phone
      - paused_by_obstacle
      - paused_by_button
      example: idle
      title: CarStatus
      type: string
    Order:
      description: Order object structure.
      example:
        notification: Order notification
        stopRouteId: 1
        notificationPhone:
          phone: "+420123456789"
        targetStopId: 1
        id: 1
        priority: normal
        lastState:
          orderId: 1
          id: 1
          status: to_accept
          timestamp: 1616425275913
        userId: 1
        timestamp: 1616425275913
        carId: 1
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        priority:
          default: normal
          description: "Priority (low, normal, high)"
          pattern: ^(low|normal|high)$
          title: priority
          type: string
        userId:
          example: 1
          format: int32
          title: Id
          type: integer
        timestamp:
          description: A Unix timestamp in milliseconds. The timestamp is used to
            determine the time of creation of an object.
          example: 1616425275913
          format: int64
          title: Timestamp
          type: integer
        carId:
          example: 1
          format: int32
          title: Id
          type: integer
        notification:
          example: Order notification
          title: notification
          type: string
        targetStopId:
          example: 1
          format: int32
          title: Id
          type: integer
        stopRouteId:
          example: 1
          format: int32
          title: Id
          type: integer
        notificationPhone:
          $ref: '#/components/schemas/MobilePhone'
        lastState:
          $ref: '#/components/schemas/OrderState'
      required:
      - carId
      - stopRouteId
      - targetStopId
      - userId
      title: Order
      type: object
    Priority:
      default: normal
      description: "Priority (low, normal, high)"
      pattern: ^(low|normal|high)$
      title: priority
      type: string
    OrderState:
      description: Order state object structure.
      example:
        orderId: 1
        id: 1
        status: to_accept
        timestamp: 1616425275913
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatus'
        orderId:
          example: 1
          format: int32
          title: Id
          type: integer
        timestamp:
          description: A Unix timestamp in milliseconds. The timestamp is used to
            determine the time of creation of an object.
          example: 1616425275913
          format: int64
          title: Timestamp
          type: integer
      required:
      - orderId
      - status
      title: OrderState
      type: object
    OrderStatus:
      description: "OrderStatus (to_accept, accepted, in_progress, done, canceled)."
      enum:
      - to_accept
      - accepted
      - in_progress
      - done
      - canceled
      example: to_accept
      title: OrderStatus
      type: string
    Id:
      example: 1
      format: int32
      title: Id
      type: integer
    PlatformHW:
      description: PlatformHW object structure.
      example:
        name: ABCD1234EF56
        id: 1
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        name:
          example: ABCD1234EF56
          title: name
          type: string
      required:
      - name
      title: PlatformHW
      type: object
    Route:
      description: Route object structure.
      example:
        name: Lužánky
        stopIds:
        - 1
        - 2
        - 3
        - 4
        id: 1
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        name:
          example: Lužánky
          title: name
          type: string
        stopIds:
          default: []
          example:
          - 1
          - 2
          - 3
          - 4
          items:
            type: integer
          title: stopIds
          type: array
      required:
      - name
      title: Route
      type: object
    RouteVisualization:
      description: Route Visualization object structure.
      example:
        routeId: 1
        hexcolor: '#FF0000'
        id: 1
        points:
        - latitude: 49.204117
          longitude: 16.606525
          altitude: 400.25
        - latitude: 49.70425
          longitude: 16.65151
          altitude: 400.78
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        routeId:
          example: 1
          format: int32
          title: Id
          type: integer
        hexcolor:
          default: '#FF0000'
          description: Color in hexadecimal format.
          example: '#FF0000'
          pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
          title: hexcolor
          type: string
        points:
          default: []
          example:
          - latitude: 49.204117
            longitude: 16.606525
            altitude: 400.25
          - latitude: 49.70425
            longitude: 16.65151
            altitude: 400.78
          items:
            $ref: '#/components/schemas/GNSSPosition'
          title: points
          type: array
      required:
      - points
      - routeId
      title: RouteVisualization
      type: object
    Color:
      default: '#FF0000'
      description: Color in hexadecimal format.
      example: '#FF0000'
      pattern: "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"
      title: hexcolor
      type: string
    Stop:
      description: Stop object structure.
      example:
        isAutoStop: false
        notificationPhone:
          phone: "+420123456789"
        name: Lidická
        id: 1
        position:
          altitude: 400.25
          latitude: 49.204117
          longitude: 16.606525
      properties:
        id:
          example: 1
          format: int32
          title: Id
          type: integer
        name:
          example: Lidická
          title: name
          type: string
        position:
          $ref: '#/components/schemas/GNSSPosition'
        notificationPhone:
          $ref: '#/components/schemas/MobilePhone'
        isAutoStop:
          default: false
          description: "If set to true, an Order to this Stop is always automatically\
            \ created when creating Orders for the Route containing this Stop."
          example: false
          title: isAutoStop
          type: boolean
      required:
      - name
      - position
      title: Stop
      type: object
    MobilePhone:
      description: MobilePhone Primitive structure.
      example:
        phone: "+420123456789"
      properties:
        phone:
          example: "+420123456789"
          title: phone
          type: string
      title: MobilePhone
      type: object
    Timestamp:
      description: A Unix timestamp in milliseconds. The timestamp is used to determine
        the time of creation of an object.
      example: 1616425275913
      format: int64
      title: Timestamp
      type: integer
    GNSSPosition:
      description: GNSSPosition primitive structure.
      example:
        altitude: 400.25
        latitude: 49.204117
        longitude: 16.606525
      properties:
        latitude:
          default: 0.0
          example: 49.204117
          format: float
          title: latitude
          type: number
        longitude:
          default: 0.0
          example: 16.606525
          format: float
          title: longitude
          type: number
        altitude:
          default: 0.0
          example: 400.25
          format: float
          title: altitude
          type: number
      title: GNSSPosition
      type: object
  securitySchemes:
    APIKeyAuth:
      description: Authentication using an API key.
      in: query
      name: api_key
      type: apiKey
      x-apikeyInfoFunc: fleet_management_api.controllers.security_controller.info_from_APIKeyAuth
    oAuth2AuthCode:
      description: oAuth2 authorization
      flows:
        authorizationCode:
          authorizationUrl: https://keycloak.bringauto.com/realms/bringauto/protocol/openid-connect/auth
          refreshUrl: https://keycloak.bringauto.com/realms/bringauto/protocol/openid-connect/token
          scopes: {}
          tokenUrl: https://keycloak.bringauto.com/realms/bringauto/protocol/openid-connect/token
      type: oauth2
      x-tokenInfoFunc: fleet_management_api.controllers.security_controller.info_from_oAuth2AuthCode
      x-scopeValidateFunc: fleet_management_api.controllers.security_controller.validate_scope_oAuth2AuthCode
