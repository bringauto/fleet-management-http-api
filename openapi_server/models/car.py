from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.mobile_phone import MobilePhone
from openapi_server import util

from openapi_server.models.mobile_phone import MobilePhone  # noqa: E501

class Car(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, platform_id=None, name=None, car_admin_phone=None, default_route_id=None, under_test=None):  # noqa: E501
        """Car - a model defined in OpenAPI

        :param id: The id of this Car.  # noqa: E501
        :type id: int
        :param platform_id: The platform_id of this Car.  # noqa: E501
        :type platform_id: int
        :param name: The name of this Car.  # noqa: E501
        :type name: str
        :param car_admin_phone: The car_admin_phone of this Car.  # noqa: E501
        :type car_admin_phone: MobilePhone
        :param default_route_id: The default_route_id of this Car.  # noqa: E501
        :type default_route_id: int
        :param under_test: The under_test of this Car.  # noqa: E501
        :type under_test: bool
        """
        self.openapi_types = {
            'id': int,
            'platform_id': int,
            'name': str,
            'car_admin_phone': MobilePhone,
            'default_route_id': int,
            'under_test': bool
        }

        self.attribute_map = {
            'id': 'id',
            'platform_id': 'platformId',
            'name': 'name',
            'car_admin_phone': 'carAdminPhone',
            'default_route_id': 'defaultRouteId',
            'under_test': 'underTest'
        }

        self._id = id
        self._platform_id = platform_id
        self._name = name
        self._car_admin_phone = car_admin_phone
        self._default_route_id = default_route_id
        self._under_test = under_test

    @classmethod
    def from_dict(cls, dikt) -> 'Car':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Car of this Car.  # noqa: E501
        :rtype: Car
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Car.


        :return: The id of this Car.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Car.


        :param id: The id of this Car.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def platform_id(self) -> int:
        """Gets the platform_id of this Car.


        :return: The platform_id of this Car.
        :rtype: int
        """
        return self._platform_id

    @platform_id.setter
    def platform_id(self, platform_id: int):
        """Sets the platform_id of this Car.


        :param platform_id: The platform_id of this Car.
        :type platform_id: int
        """

        self._platform_id = platform_id

    @property
    def name(self) -> str:
        """Gets the name of this Car.


        :return: The name of this Car.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Car.


        :param name: The name of this Car.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def car_admin_phone(self) -> MobilePhone:
        """Gets the car_admin_phone of this Car.


        :return: The car_admin_phone of this Car.
        :rtype: MobilePhone
        """
        return self._car_admin_phone

    @car_admin_phone.setter
    def car_admin_phone(self, car_admin_phone: MobilePhone):
        """Sets the car_admin_phone of this Car.


        :param car_admin_phone: The car_admin_phone of this Car.
        :type car_admin_phone: MobilePhone
        """

        self._car_admin_phone = car_admin_phone

    @property
    def default_route_id(self) -> int:
        """Gets the default_route_id of this Car.


        :return: The default_route_id of this Car.
        :rtype: int
        """
        return self._default_route_id

    @default_route_id.setter
    def default_route_id(self, default_route_id: int):
        """Sets the default_route_id of this Car.


        :param default_route_id: The default_route_id of this Car.
        :type default_route_id: int
        """

        self._default_route_id = default_route_id

    @property
    def under_test(self) -> bool:
        """Gets the under_test of this Car.


        :return: The under_test of this Car.
        :rtype: bool
        """
        return self._under_test

    @under_test.setter
    def under_test(self, under_test: bool):
        """Sets the under_test of this Car.


        :param under_test: The under_test of this Car.
        :type under_test: bool
        """

        self._under_test = under_test
