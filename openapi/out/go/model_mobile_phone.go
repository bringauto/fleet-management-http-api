/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 2.3.1
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MobilePhone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MobilePhone{}

// MobilePhone MobilePhone Primitive structure.
type MobilePhone struct {
	Phone *string `json:"phone,omitempty"`
}

// NewMobilePhone instantiates a new MobilePhone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobilePhone() *MobilePhone {
	this := MobilePhone{}
	return &this
}

// NewMobilePhoneWithDefaults instantiates a new MobilePhone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobilePhoneWithDefaults() *MobilePhone {
	this := MobilePhone{}
	return &this
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *MobilePhone) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobilePhone) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *MobilePhone) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *MobilePhone) SetPhone(v string) {
	o.Phone = &v
}

func (o MobilePhone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MobilePhone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	return toSerialize, nil
}

type NullableMobilePhone struct {
	value *MobilePhone
	isSet bool
}

func (v NullableMobilePhone) Get() *MobilePhone {
	return v.value
}

func (v *NullableMobilePhone) Set(val *MobilePhone) {
	v.value = val
	v.isSet = true
}

func (v NullableMobilePhone) IsSet() bool {
	return v.isSet
}

func (v *NullableMobilePhone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobilePhone(val *MobilePhone) *NullableMobilePhone {
	return &NullableMobilePhone{value: val, isSet: true}
}

func (v NullableMobilePhone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobilePhone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


