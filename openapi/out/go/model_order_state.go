/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 2.3.1
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OrderState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderState{}

// OrderState Order state object structure.
type OrderState struct {
	Id *int32 `json:"id,omitempty"`
	Status OrderStatus `json:"status"`
	OrderId int32 `json:"orderId"`
	// A Unix timestamp in milliseconds. The timestamp is used to determine the time of creation of an object.
	Timestamp *int64 `json:"timestamp,omitempty"`
}

type _OrderState OrderState

// NewOrderState instantiates a new OrderState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderState(status OrderStatus, orderId int32) *OrderState {
	this := OrderState{}
	this.Status = status
	this.OrderId = orderId
	return &this
}

// NewOrderStateWithDefaults instantiates a new OrderState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderStateWithDefaults() *OrderState {
	this := OrderState{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OrderState) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderState) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OrderState) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *OrderState) SetId(v int32) {
	o.Id = &v
}

// GetStatus returns the Status field value
func (o *OrderState) GetStatus() OrderStatus {
	if o == nil {
		var ret OrderStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OrderState) GetStatusOk() (*OrderStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OrderState) SetStatus(v OrderStatus) {
	o.Status = v
}

// GetOrderId returns the OrderId field value
func (o *OrderState) GetOrderId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *OrderState) GetOrderIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *OrderState) SetOrderId(v int32) {
	o.OrderId = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *OrderState) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderState) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *OrderState) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *OrderState) SetTimestamp(v int64) {
	o.Timestamp = &v
}

func (o OrderState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["status"] = o.Status
	toSerialize["orderId"] = o.OrderId
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

func (o *OrderState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"orderId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrderState := _OrderState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrderState)

	if err != nil {
		return err
	}

	*o = OrderState(varOrderState)

	return err
}

type NullableOrderState struct {
	value *OrderState
	isSet bool
}

func (v NullableOrderState) Get() *OrderState {
	return v.value
}

func (v *NullableOrderState) Set(val *OrderState) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderState) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderState(val *OrderState) *NullableOrderState {
	return &NullableOrderState{value: val, isSet: true}
}

func (v NullableOrderState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


