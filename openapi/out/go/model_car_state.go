/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 2.3.1
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CarState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CarState{}

// CarState Car State object structure
type CarState struct {
	Id *int32 `json:"id,omitempty"`
	// A Unix timestamp in milliseconds. The timestamp is used to determine the time of creation of an object.
	Timestamp *int64 `json:"timestamp,omitempty"`
	Status CarStatus `json:"status"`
	Fuel *int32 `json:"fuel,omitempty"`
	CarId int32 `json:"carId"`
	Speed *float32 `json:"speed,omitempty"`
	Position *GNSSPosition `json:"position,omitempty"`
}

type _CarState CarState

// NewCarState instantiates a new CarState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarState(status CarStatus, carId int32) *CarState {
	this := CarState{}
	this.Status = status
	var fuel int32 = 0
	this.Fuel = &fuel
	this.CarId = carId
	var speed float32 = 0.0
	this.Speed = &speed
	return &this
}

// NewCarStateWithDefaults instantiates a new CarState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarStateWithDefaults() *CarState {
	this := CarState{}
	var fuel int32 = 0
	this.Fuel = &fuel
	var speed float32 = 0.0
	this.Speed = &speed
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CarState) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarState) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CarState) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CarState) SetId(v int32) {
	o.Id = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CarState) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarState) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CarState) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *CarState) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetStatus returns the Status field value
func (o *CarState) GetStatus() CarStatus {
	if o == nil {
		var ret CarStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CarState) GetStatusOk() (*CarStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CarState) SetStatus(v CarStatus) {
	o.Status = v
}

// GetFuel returns the Fuel field value if set, zero value otherwise.
func (o *CarState) GetFuel() int32 {
	if o == nil || IsNil(o.Fuel) {
		var ret int32
		return ret
	}
	return *o.Fuel
}

// GetFuelOk returns a tuple with the Fuel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarState) GetFuelOk() (*int32, bool) {
	if o == nil || IsNil(o.Fuel) {
		return nil, false
	}
	return o.Fuel, true
}

// HasFuel returns a boolean if a field has been set.
func (o *CarState) HasFuel() bool {
	if o != nil && !IsNil(o.Fuel) {
		return true
	}

	return false
}

// SetFuel gets a reference to the given int32 and assigns it to the Fuel field.
func (o *CarState) SetFuel(v int32) {
	o.Fuel = &v
}

// GetCarId returns the CarId field value
func (o *CarState) GetCarId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CarId
}

// GetCarIdOk returns a tuple with the CarId field value
// and a boolean to check if the value has been set.
func (o *CarState) GetCarIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarId, true
}

// SetCarId sets field value
func (o *CarState) SetCarId(v int32) {
	o.CarId = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *CarState) GetSpeed() float32 {
	if o == nil || IsNil(o.Speed) {
		var ret float32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarState) GetSpeedOk() (*float32, bool) {
	if o == nil || IsNil(o.Speed) {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *CarState) HasSpeed() bool {
	if o != nil && !IsNil(o.Speed) {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given float32 and assigns it to the Speed field.
func (o *CarState) SetSpeed(v float32) {
	o.Speed = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *CarState) GetPosition() GNSSPosition {
	if o == nil || IsNil(o.Position) {
		var ret GNSSPosition
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarState) GetPositionOk() (*GNSSPosition, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *CarState) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given GNSSPosition and assigns it to the Position field.
func (o *CarState) SetPosition(v GNSSPosition) {
	o.Position = &v
}

func (o CarState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CarState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Fuel) {
		toSerialize["fuel"] = o.Fuel
	}
	toSerialize["carId"] = o.CarId
	if !IsNil(o.Speed) {
		toSerialize["speed"] = o.Speed
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	return toSerialize, nil
}

func (o *CarState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"carId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCarState := _CarState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCarState)

	if err != nil {
		return err
	}

	*o = CarState(varCarState)

	return err
}

type NullableCarState struct {
	value *CarState
	isSet bool
}

func (v NullableCarState) Get() *CarState {
	return v.value
}

func (v *NullableCarState) Set(val *CarState) {
	v.value = val
	v.isSet = true
}

func (v NullableCarState) IsSet() bool {
	return v.isSet
}

func (v *NullableCarState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarState(val *CarState) *NullableCarState {
	return &NullableCarState{value: val, isSet: true}
}

func (v NullableCarState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


