/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 2.3.1
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RouteVisualization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteVisualization{}

// RouteVisualization Route Visualization object structure.
type RouteVisualization struct {
	Id *int32 `json:"id,omitempty"`
	RouteId int32 `json:"routeId"`
	// Color in hexadecimal format.
	Hexcolor *string `json:"hexcolor,omitempty"`
	Points []GNSSPosition `json:"points"`
}

type _RouteVisualization RouteVisualization

// NewRouteVisualization instantiates a new RouteVisualization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteVisualization(routeId int32, points []GNSSPosition) *RouteVisualization {
	this := RouteVisualization{}
	this.RouteId = routeId
	var hexcolor string = "#FF0000"
	this.Hexcolor = &hexcolor
	this.Points = points
	return &this
}

// NewRouteVisualizationWithDefaults instantiates a new RouteVisualization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteVisualizationWithDefaults() *RouteVisualization {
	this := RouteVisualization{}
	var hexcolor string = "#FF0000"
	this.Hexcolor = &hexcolor
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RouteVisualization) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteVisualization) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RouteVisualization) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RouteVisualization) SetId(v int32) {
	o.Id = &v
}

// GetRouteId returns the RouteId field value
func (o *RouteVisualization) GetRouteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value
// and a boolean to check if the value has been set.
func (o *RouteVisualization) GetRouteIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RouteId, true
}

// SetRouteId sets field value
func (o *RouteVisualization) SetRouteId(v int32) {
	o.RouteId = v
}

// GetHexcolor returns the Hexcolor field value if set, zero value otherwise.
func (o *RouteVisualization) GetHexcolor() string {
	if o == nil || IsNil(o.Hexcolor) {
		var ret string
		return ret
	}
	return *o.Hexcolor
}

// GetHexcolorOk returns a tuple with the Hexcolor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteVisualization) GetHexcolorOk() (*string, bool) {
	if o == nil || IsNil(o.Hexcolor) {
		return nil, false
	}
	return o.Hexcolor, true
}

// HasHexcolor returns a boolean if a field has been set.
func (o *RouteVisualization) HasHexcolor() bool {
	if o != nil && !IsNil(o.Hexcolor) {
		return true
	}

	return false
}

// SetHexcolor gets a reference to the given string and assigns it to the Hexcolor field.
func (o *RouteVisualization) SetHexcolor(v string) {
	o.Hexcolor = &v
}

// GetPoints returns the Points field value
func (o *RouteVisualization) GetPoints() []GNSSPosition {
	if o == nil {
		var ret []GNSSPosition
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *RouteVisualization) GetPointsOk() ([]GNSSPosition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Points, true
}

// SetPoints sets field value
func (o *RouteVisualization) SetPoints(v []GNSSPosition) {
	o.Points = v
}

func (o RouteVisualization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteVisualization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["routeId"] = o.RouteId
	if !IsNil(o.Hexcolor) {
		toSerialize["hexcolor"] = o.Hexcolor
	}
	toSerialize["points"] = o.Points
	return toSerialize, nil
}

func (o *RouteVisualization) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routeId",
		"points",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteVisualization := _RouteVisualization{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteVisualization)

	if err != nil {
		return err
	}

	*o = RouteVisualization(varRouteVisualization)

	return err
}

type NullableRouteVisualization struct {
	value *RouteVisualization
	isSet bool
}

func (v NullableRouteVisualization) Get() *RouteVisualization {
	return v.value
}

func (v *NullableRouteVisualization) Set(val *RouteVisualization) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteVisualization) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteVisualization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteVisualization(val *RouteVisualization) *NullableRouteVisualization {
	return &NullableRouteVisualization{value: val, isSet: true}
}

func (v NullableRouteVisualization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteVisualization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


