/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 2.3.1
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Order type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Order{}

// Order Order object structure.
type Order struct {
	Id *int32 `json:"id,omitempty"`
	// Priority (low, normal, high)
	Priority *string `json:"priority,omitempty"`
	UserId int32 `json:"userId"`
	// A Unix timestamp in milliseconds. The timestamp is used to determine the time of creation of an object.
	Timestamp *int64 `json:"timestamp,omitempty"`
	CarId int32 `json:"carId"`
	Notification *string `json:"notification,omitempty"`
	TargetStopId int32 `json:"targetStopId"`
	StopRouteId int32 `json:"stopRouteId"`
	NotificationPhone *MobilePhone `json:"notificationPhone,omitempty"`
	LastState *OrderState `json:"lastState,omitempty"`
}

type _Order Order

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder(userId int32, carId int32, targetStopId int32, stopRouteId int32) *Order {
	this := Order{}
	var priority string = "normal"
	this.Priority = &priority
	this.UserId = userId
	this.CarId = carId
	this.TargetStopId = targetStopId
	this.StopRouteId = stopRouteId
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	var priority string = "normal"
	this.Priority = &priority
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Order) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Order) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Order) SetId(v int32) {
	o.Id = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *Order) GetPriority() string {
	if o == nil || IsNil(o.Priority) {
		var ret string
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPriorityOk() (*string, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *Order) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given string and assigns it to the Priority field.
func (o *Order) SetPriority(v string) {
	o.Priority = &v
}

// GetUserId returns the UserId field value
func (o *Order) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Order) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Order) SetUserId(v int32) {
	o.UserId = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Order) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Order) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *Order) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetCarId returns the CarId field value
func (o *Order) GetCarId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CarId
}

// GetCarIdOk returns a tuple with the CarId field value
// and a boolean to check if the value has been set.
func (o *Order) GetCarIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarId, true
}

// SetCarId sets field value
func (o *Order) SetCarId(v int32) {
	o.CarId = v
}

// GetNotification returns the Notification field value if set, zero value otherwise.
func (o *Order) GetNotification() string {
	if o == nil || IsNil(o.Notification) {
		var ret string
		return ret
	}
	return *o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetNotificationOk() (*string, bool) {
	if o == nil || IsNil(o.Notification) {
		return nil, false
	}
	return o.Notification, true
}

// HasNotification returns a boolean if a field has been set.
func (o *Order) HasNotification() bool {
	if o != nil && !IsNil(o.Notification) {
		return true
	}

	return false
}

// SetNotification gets a reference to the given string and assigns it to the Notification field.
func (o *Order) SetNotification(v string) {
	o.Notification = &v
}

// GetTargetStopId returns the TargetStopId field value
func (o *Order) GetTargetStopId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TargetStopId
}

// GetTargetStopIdOk returns a tuple with the TargetStopId field value
// and a boolean to check if the value has been set.
func (o *Order) GetTargetStopIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetStopId, true
}

// SetTargetStopId sets field value
func (o *Order) SetTargetStopId(v int32) {
	o.TargetStopId = v
}

// GetStopRouteId returns the StopRouteId field value
func (o *Order) GetStopRouteId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StopRouteId
}

// GetStopRouteIdOk returns a tuple with the StopRouteId field value
// and a boolean to check if the value has been set.
func (o *Order) GetStopRouteIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StopRouteId, true
}

// SetStopRouteId sets field value
func (o *Order) SetStopRouteId(v int32) {
	o.StopRouteId = v
}

// GetNotificationPhone returns the NotificationPhone field value if set, zero value otherwise.
func (o *Order) GetNotificationPhone() MobilePhone {
	if o == nil || IsNil(o.NotificationPhone) {
		var ret MobilePhone
		return ret
	}
	return *o.NotificationPhone
}

// GetNotificationPhoneOk returns a tuple with the NotificationPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetNotificationPhoneOk() (*MobilePhone, bool) {
	if o == nil || IsNil(o.NotificationPhone) {
		return nil, false
	}
	return o.NotificationPhone, true
}

// HasNotificationPhone returns a boolean if a field has been set.
func (o *Order) HasNotificationPhone() bool {
	if o != nil && !IsNil(o.NotificationPhone) {
		return true
	}

	return false
}

// SetNotificationPhone gets a reference to the given MobilePhone and assigns it to the NotificationPhone field.
func (o *Order) SetNotificationPhone(v MobilePhone) {
	o.NotificationPhone = &v
}

// GetLastState returns the LastState field value if set, zero value otherwise.
func (o *Order) GetLastState() OrderState {
	if o == nil || IsNil(o.LastState) {
		var ret OrderState
		return ret
	}
	return *o.LastState
}

// GetLastStateOk returns a tuple with the LastState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLastStateOk() (*OrderState, bool) {
	if o == nil || IsNil(o.LastState) {
		return nil, false
	}
	return o.LastState, true
}

// HasLastState returns a boolean if a field has been set.
func (o *Order) HasLastState() bool {
	if o != nil && !IsNil(o.LastState) {
		return true
	}

	return false
}

// SetLastState gets a reference to the given OrderState and assigns it to the LastState field.
func (o *Order) SetLastState(v OrderState) {
	o.LastState = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Order) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	toSerialize["userId"] = o.UserId
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["carId"] = o.CarId
	if !IsNil(o.Notification) {
		toSerialize["notification"] = o.Notification
	}
	toSerialize["targetStopId"] = o.TargetStopId
	toSerialize["stopRouteId"] = o.StopRouteId
	if !IsNil(o.NotificationPhone) {
		toSerialize["notificationPhone"] = o.NotificationPhone
	}
	if !IsNil(o.LastState) {
		toSerialize["lastState"] = o.LastState
	}
	return toSerialize, nil
}

func (o *Order) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"carId",
		"targetStopId",
		"stopRouteId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrder := _Order{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrder)

	if err != nil {
		return err
	}

	*o = Order(varOrder)

	return err
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


