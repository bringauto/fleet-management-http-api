/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 2.3.1
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Stop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stop{}

// Stop Stop object structure.
type Stop struct {
	Id *int32 `json:"id,omitempty"`
	Name string `json:"name"`
	Position GNSSPosition `json:"position"`
	NotificationPhone *MobilePhone `json:"notificationPhone,omitempty"`
}

type _Stop Stop

// NewStop instantiates a new Stop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStop(name string, position GNSSPosition) *Stop {
	this := Stop{}
	this.Name = name
	this.Position = position
	return &this
}

// NewStopWithDefaults instantiates a new Stop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopWithDefaults() *Stop {
	this := Stop{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Stop) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Stop) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Stop) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Stop) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Stop) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Stop) SetName(v string) {
	o.Name = v
}

// GetPosition returns the Position field value
func (o *Stop) GetPosition() GNSSPosition {
	if o == nil {
		var ret GNSSPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *Stop) GetPositionOk() (*GNSSPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *Stop) SetPosition(v GNSSPosition) {
	o.Position = v
}

// GetNotificationPhone returns the NotificationPhone field value if set, zero value otherwise.
func (o *Stop) GetNotificationPhone() MobilePhone {
	if o == nil || IsNil(o.NotificationPhone) {
		var ret MobilePhone
		return ret
	}
	return *o.NotificationPhone
}

// GetNotificationPhoneOk returns a tuple with the NotificationPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetNotificationPhoneOk() (*MobilePhone, bool) {
	if o == nil || IsNil(o.NotificationPhone) {
		return nil, false
	}
	return o.NotificationPhone, true
}

// HasNotificationPhone returns a boolean if a field has been set.
func (o *Stop) HasNotificationPhone() bool {
	if o != nil && !IsNil(o.NotificationPhone) {
		return true
	}

	return false
}

// SetNotificationPhone gets a reference to the given MobilePhone and assigns it to the NotificationPhone field.
func (o *Stop) SetNotificationPhone(v MobilePhone) {
	o.NotificationPhone = &v
}

func (o Stop) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["position"] = o.Position
	if !IsNil(o.NotificationPhone) {
		toSerialize["notificationPhone"] = o.NotificationPhone
	}
	return toSerialize, nil
}

func (o *Stop) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"position",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStop := _Stop{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStop)

	if err != nil {
		return err
	}

	*o = Stop(varStop)

	return err
}

type NullableStop struct {
	value *Stop
	isSet bool
}

func (v NullableStop) Get() *Stop {
	return v.value
}

func (v *NullableStop) Set(val *Stop) {
	v.value = val
	v.isSet = true
}

func (v NullableStop) IsSet() bool {
	return v.isSet
}

func (v *NullableStop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStop(val *Stop) *NullableStop {
	return &NullableStop{value: val, isSet: true}
}

func (v NullableStop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


