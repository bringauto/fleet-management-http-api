/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 2.3.1
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Car type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Car{}

// Car Car model structure.
type Car struct {
	Id *int32 `json:"id,omitempty"`
	PlatformHwId int32 `json:"platformHwId"`
	Name string `json:"name"`
	CarAdminPhone MobilePhone `json:"carAdminPhone"`
	DefaultRouteId *int32 `json:"defaultRouteId,omitempty"`
	UnderTest *bool `json:"underTest,omitempty"`
	LastState *CarState `json:"lastState,omitempty"`
}

type _Car Car

// NewCar instantiates a new Car object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCar(platformHwId int32, name string, carAdminPhone MobilePhone) *Car {
	this := Car{}
	this.PlatformHwId = platformHwId
	this.Name = name
	this.CarAdminPhone = carAdminPhone
	var underTest bool = true
	this.UnderTest = &underTest
	return &this
}

// NewCarWithDefaults instantiates a new Car object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarWithDefaults() *Car {
	this := Car{}
	var underTest bool = true
	this.UnderTest = &underTest
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Car) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Car) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Car) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Car) SetId(v int32) {
	o.Id = &v
}

// GetPlatformHwId returns the PlatformHwId field value
func (o *Car) GetPlatformHwId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlatformHwId
}

// GetPlatformHwIdOk returns a tuple with the PlatformHwId field value
// and a boolean to check if the value has been set.
func (o *Car) GetPlatformHwIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlatformHwId, true
}

// SetPlatformHwId sets field value
func (o *Car) SetPlatformHwId(v int32) {
	o.PlatformHwId = v
}

// GetName returns the Name field value
func (o *Car) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Car) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Car) SetName(v string) {
	o.Name = v
}

// GetCarAdminPhone returns the CarAdminPhone field value
func (o *Car) GetCarAdminPhone() MobilePhone {
	if o == nil {
		var ret MobilePhone
		return ret
	}

	return o.CarAdminPhone
}

// GetCarAdminPhoneOk returns a tuple with the CarAdminPhone field value
// and a boolean to check if the value has been set.
func (o *Car) GetCarAdminPhoneOk() (*MobilePhone, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarAdminPhone, true
}

// SetCarAdminPhone sets field value
func (o *Car) SetCarAdminPhone(v MobilePhone) {
	o.CarAdminPhone = v
}

// GetDefaultRouteId returns the DefaultRouteId field value if set, zero value otherwise.
func (o *Car) GetDefaultRouteId() int32 {
	if o == nil || IsNil(o.DefaultRouteId) {
		var ret int32
		return ret
	}
	return *o.DefaultRouteId
}

// GetDefaultRouteIdOk returns a tuple with the DefaultRouteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Car) GetDefaultRouteIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultRouteId) {
		return nil, false
	}
	return o.DefaultRouteId, true
}

// HasDefaultRouteId returns a boolean if a field has been set.
func (o *Car) HasDefaultRouteId() bool {
	if o != nil && !IsNil(o.DefaultRouteId) {
		return true
	}

	return false
}

// SetDefaultRouteId gets a reference to the given int32 and assigns it to the DefaultRouteId field.
func (o *Car) SetDefaultRouteId(v int32) {
	o.DefaultRouteId = &v
}

// GetUnderTest returns the UnderTest field value if set, zero value otherwise.
func (o *Car) GetUnderTest() bool {
	if o == nil || IsNil(o.UnderTest) {
		var ret bool
		return ret
	}
	return *o.UnderTest
}

// GetUnderTestOk returns a tuple with the UnderTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Car) GetUnderTestOk() (*bool, bool) {
	if o == nil || IsNil(o.UnderTest) {
		return nil, false
	}
	return o.UnderTest, true
}

// HasUnderTest returns a boolean if a field has been set.
func (o *Car) HasUnderTest() bool {
	if o != nil && !IsNil(o.UnderTest) {
		return true
	}

	return false
}

// SetUnderTest gets a reference to the given bool and assigns it to the UnderTest field.
func (o *Car) SetUnderTest(v bool) {
	o.UnderTest = &v
}

// GetLastState returns the LastState field value if set, zero value otherwise.
func (o *Car) GetLastState() CarState {
	if o == nil || IsNil(o.LastState) {
		var ret CarState
		return ret
	}
	return *o.LastState
}

// GetLastStateOk returns a tuple with the LastState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Car) GetLastStateOk() (*CarState, bool) {
	if o == nil || IsNil(o.LastState) {
		return nil, false
	}
	return o.LastState, true
}

// HasLastState returns a boolean if a field has been set.
func (o *Car) HasLastState() bool {
	if o != nil && !IsNil(o.LastState) {
		return true
	}

	return false
}

// SetLastState gets a reference to the given CarState and assigns it to the LastState field.
func (o *Car) SetLastState(v CarState) {
	o.LastState = &v
}

func (o Car) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Car) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["platformHwId"] = o.PlatformHwId
	toSerialize["name"] = o.Name
	toSerialize["carAdminPhone"] = o.CarAdminPhone
	if !IsNil(o.DefaultRouteId) {
		toSerialize["defaultRouteId"] = o.DefaultRouteId
	}
	if !IsNil(o.UnderTest) {
		toSerialize["underTest"] = o.UnderTest
	}
	if !IsNil(o.LastState) {
		toSerialize["lastState"] = o.LastState
	}
	return toSerialize, nil
}

func (o *Car) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"platformHwId",
		"name",
		"carAdminPhone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCar := _Car{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCar)

	if err != nil {
		return err
	}

	*o = Car(varCar)

	return err
}

type NullableCar struct {
	value *Car
	isSet bool
}

func (v NullableCar) Get() *Car {
	return v.value
}

func (v *NullableCar) Set(val *Car) {
	v.value = val
	v.isSet = true
}

func (v NullableCar) IsSet() bool {
	return v.isSet
}

func (v *NullableCar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCar(val *Car) *NullableCar {
	return &NullableCar{value: val, isSet: true}
}

func (v NullableCar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


