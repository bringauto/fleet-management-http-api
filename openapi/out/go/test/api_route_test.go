/*
BringAuto Fleet Management v2 API

Testing RouteAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_RouteAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RouteAPIService CreateRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RouteAPI.CreateRoute(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RouteAPIService DeleteRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var routeId int32

		httpRes, err := apiClient.RouteAPI.DeleteRoute(context.Background(), routeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RouteAPIService GetRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var routeId int32

		resp, httpRes, err := apiClient.RouteAPI.GetRoute(context.Background(), routeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RouteAPIService GetRouteVisualization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var routeId int32

		resp, httpRes, err := apiClient.RouteAPI.GetRouteVisualization(context.Background(), routeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RouteAPIService GetRoutes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RouteAPI.GetRoutes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RouteAPIService RedefineRouteVisualization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RouteAPI.RedefineRouteVisualization(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RouteAPIService UpdateRoute", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.RouteAPI.UpdateRoute(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
