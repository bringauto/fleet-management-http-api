paths:
  /car:
    post:
      operationId: createCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Create a new car
      requestBody:
        x-body-name: car
        description: A Car model in JSON format.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful created a new car.
          content:
            text/plain:
              type: string
        '400':
          $ref: './errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: './errors.yaml#/components/responses/Forbidden'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getCars
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Finds all cars
      responses:
        '200':
          description: Returning all existing cars.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
              example:
                [
                  {
                    "id": 1,
                    "platformId": 5,
                    "name": 'BAT-2022-01',
                    "carAdminPhone": {"phone":'+420123456789'},
                    "defaultRouteId": 1,
                    "underTest": false
                  }
                ]
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: './errors.yaml#/components/responses/Forbidden'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Update an existing car by ID
      requestBody:
        description: Car update json
        x-body-name: car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful car update
          content:
            text/plain:
              type: string
        '400':
          $ref: './errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: './errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: './errors.yaml#/components/responses/NotFound'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'
  /car/{carId}:
    get:
      operationId: getCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Finds car by ID
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: './errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: './errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: './errors.yaml#/components/responses/NotFound'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Delete a car
      parameters:
        - name: carId
          in: path
          description: ID of car to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful car removal
          content:
            text/plain:
              type: string
              example: 2 cars were succesfully removed.
        '400':
          $ref: './errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: './errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: './errors.yaml#/components/responses/NotFound'
        '405':
          $ref: './errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'
  /carstate:
    post:
      operationId: addCarState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
      tags:
        - carState
      summary: Add a new state for a car by ID
      requestBody:
        description: Car state json
        x-body-name: carState
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarState'
        required: true
      responses:
        '200':
          description: Successfuly added car state
          content:
            text/plain:
              type: string
        '400':
          $ref: './errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: './errors.yaml#/components/responses/Forbidden'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getAllCarStates
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
      tags:
        - carState
      summary: Finds all car states
      responses:
        '200':
          description: Successfuly found all car states
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarState'
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: './errors.yaml#/components/responses/Forbidden'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'

  /carstate/{carId}:
    get:
      operationId: getCarStates
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
      tags:
        - carState
      summary: Finds car states by ID
      parameters:
        - name: carId
          in: path
          description: ID of car for which states shall be returned
          required: true
          example: 1
          schema:
            type: integer
            format: int32
        - name: allAvailable
          in: query
          description: Whether to return all available car states or only the latest one
          required: false
          example: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successfuly found car state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarState'
        '400':
          $ref: './errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: './errors.yaml#/components/responses/Unauthorized'
        '404':
          $ref: './errors.yaml#/components/responses/NotFound'
        default:
          $ref: './errors.yaml#/components/responses/UnexpectedError'

components:
  schemas:
    Car:
      type: object
      description: Car object structure
      required:
        - platformHwId
        - name
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        platformHwId:
          $ref: 'common_models.yaml#/components/schemas/Id'
          example: 5
        name:
          type: string
          example: 'BAT-2022-01'
        carAdminPhone:
          $ref: 'common_models.yaml#/components/schemas/MobilePhone'
        defaultRouteId:
          $ref: 'common_models.yaml#/components/schemas/Id'
        underTest:
          type: boolean
          default: true
          example: false
    CarState:
      type: object
      description: Car state object structure
      required:
        - status
        - carId
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/CarStatus'
        fuel:
          type: integer
          format: int32
          default: 0
          example: 80
        carId:
          $ref: 'common_models.yaml#/components/schemas/Id'
        speed:
          type: number
          format: float
          default: 0.0
          example: 20.5
        position:
          $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
    CarStatus:
      type: string
      description: CarStatus enum
      enum:
        - idle
        - charging
        - out_of_order
        - stopped_by_phone
      example: idle