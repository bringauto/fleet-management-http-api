paths:
  /route:
    post:
      operationId: createRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Create a new route
      requestBody:
        description: New route json
        x-body-name: route
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getRoutes
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Finds all routes
      responses:
        '200':
          description: Successfuly found all routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lužánky',
                    "points": [
                      {
                        "latitude": 49.204117,
                        "longitude": 16.606525,
                        "altitude": 400.25
                      }
                    ],
                    "stopIds": [1, 2, 3, 4]
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Update an existing route by ID
      requestBody:
        description: Route update json
        x-body-name: route
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route/{routeId}:
    get:
      operationId: getRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Finds route by ID
      parameters:
        - name: routeId
          in: path
          description: ID of route to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Delete a route
      parameters:
      - $ref: '#/components/parameters/RouteId'
      responses:
        '200':
          description: Successful route removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /routepoints/{routeId}:
    get:
      operationId: getRoutePoints
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route_points
      tags:
        - route
      summary: Finds route points gor given route identified by the route's ID
      parameters:
        - $ref: '#/components/parameters/RouteId'
      responses:
        '200':
          description: Successfuly found route points
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutePoints'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'

components:
  parameters:
    RouteId:
      name: routeId
      in: path
      description: ID of route to delete
      required: true
      example: 1
      schema:
        type: integer
        format: int32
  schemas:
    Route:
      type: object
      description: Route object structure
      required:
        - id
        - name
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        name:
          type: string
          example: 'Lužánky'
        stopIds:
          type: array
          default: []
          items:
            type: integer
          example: [1, 2, 3, 4]
    RoutePoints:
      type: array
      items:
        $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
      example:
        [
          {
            "latitude": 49.204117,
            "longitude": 16.606525,
            "altitude": 400.25
          },
          {
            "latitude": 49.70425,
            "longitude": 16.65151,
            "altitude": 400.78
          }
        ]
