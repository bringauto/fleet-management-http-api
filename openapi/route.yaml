paths:
  /route:
    post:
      operationId: createRoutes
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Create new Routes.
      requestBody:
        description: A list of Route models in JSON format.
        x-body-name: routes
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: The Routes have been successfully created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getRoutes
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Find and return all existing Routes.
      responses:
        '200':
          description: All the currently existing Routes have been returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lužánky',
                    "stopIds": [1, 2, 3, 4]
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateRoutes
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Update already existing Routes.
      requestBody:
        description: JSON representation of a list of the Routes with updated data.
        x-body-name: routes
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: The Routes have been successfully updated.
          content:
            text/plain:
              type: string
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route/{routeId}:
    get:
      operationId: getRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Find a single Route with the specified ID.
      parameters:
      - $ref: '#/components/parameters/RouteId'
      responses:
        '200':
          description: The Route with the specified ID has been found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Delete a Route with the specified ID.
      parameters:
      - $ref: '#/components/parameters/RouteId'
      responses:
        '200':
          description: The Route with the specified ID has been deleted.
          content:
            text/plain:
              type: string
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route-visualization/{routeId}:
    get:
      operationId: getRouteVisualization
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route_visualization
      tags:
        - route
      summary: Find Route Visualization for a Route identified by the route's ID.
      parameters:
        - $ref: '#/components/parameters/RouteId'
      responses:
        '200':
          description: The Route Visualization for the specified Route ID has been found and returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteVisualization'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route-visualization:
    post:
      operationId: redefineRouteVisualizations
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route_visualization
      tags:
        - route
      summary: Redefine Route Visualizations for existing Routes.
      requestBody:
        description: A list of Route Visualization models in JSON format.
        x-body-name: RouteVisualizations
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RouteVisualization'
        required: true
      responses:
        '200':
          description: The Route Visualizations have been successfully redefined.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RouteVisualization'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'

components:
  parameters:
    RouteId:
      name: routeId
      in: path
      description: An ID a the Route
      required: true
      example: 1
      schema:
        type: integer
        format: int32
  schemas:
    Route:
      type: object
      description: Route object structure.
      required:
        - name
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        name:
          type: string
          example: 'Lužánky'
        stopIds:
          type: array
          default: []
          items:
            type: integer
          example: [1, 2, 3, 4]
    RouteVisualization:
      type: object
      description: Route Visualization object structure.
      required:
        - routeId
        - points
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        routeId:
          $ref: 'common_models.yaml#/components/schemas/Id'
        hexcolor:
          $ref: '#/components/schemas/Color'
        points:
          type: array
          default: []
          items:
            $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
          example:
            [
              {
                "latitude": 49.204117,
                "longitude": 16.606525,
                "altitude": 400.25
              },
              {
                "latitude": 49.70425,
                "longitude": 16.65151,
                "altitude": 400.78
              }
            ]
    Color:
      type: string
      description: Color in hexadecimal format.
      pattern: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'
      example: '#FF0000'
      default: '#FF0000'