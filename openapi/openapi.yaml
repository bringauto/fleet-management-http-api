openapi: 3.0.0
info:
  title: BringAuto Fleet Management API
  description: Specification for BringAuto fleet backend HTTP API
  version: 1.0.0

servers:
  - url: /v1
    description: Local server

tags:
  - name: car
    description: Car related functions
  - name: carState
    description: Car state related functions
  - name: order
    description: Order related functions
  - name: platformHwId
    description: Platform hardware ID related functions
  - name: route
    description: Route state related functions
  - name: stop
    description: Stop state related functions
  - name: user
    description: User related functions

paths:

  /car:
    $ref: 'car.yaml#/paths/~1car'
  /car/{carId}:
    $ref: 'car.yaml#/paths/~1car~1{carId}'
  /car/startstop/{carId}:
    $ref: 'car.yaml#/paths/~1car~1startstop~1{carId}'
  /carstate:
    $ref: 'car.yaml#/paths/~1carstate'
  /carstate/{carId}:
    $ref: 'car.yaml#/paths/~1carstate~1{carId}'

  /order:
    $ref: 'order.yaml#/paths/~1order'
  /order/{orderId}:
    $ref: 'order.yaml#/paths/~1order~1{orderId}'
  /order/wait/{carId}:
    $ref: 'order.yaml#/paths/~1order~1wait~1{carId}'
  /orderstate:
    $ref: 'order.yaml#/paths/~1orderstate'
  /orderstate/{orderId}:
    $ref: 'order.yaml#/paths/~1orderstate~1{orderId}'

  /platformhwid:
    post:
      operationId: createHwId
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Create a new platform hwId
      requestBody:
        description: Platform hardware ID json
        x-body-name: platformHwId
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformHwId'
        required: true
      responses:
        '200':
          description: Successful platform hardware ID creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHwId'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getHwIds
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Finds all platform hwIds
      responses:
        '200':
          description: Successfuly found all platform hardware IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlatformHwId'
              example:
                [
                  {
                    "id": 1,
                    "name": 'ABCD1234EF56'
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /platformhwid/{platformhwidId}:
    get:
      operationId: getHwId
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Finds platform hwId by ID
      parameters:
        - name: platformhwidId
          in: path
          description: ID of platform hwId to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found platform hardware ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHwId'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteHwId
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Delete a platform hwId
      parameters:
        - name: platformhwidId
          in: path
          description: ID of platform hwId to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful platform hardware ID removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route:
    post:
      operationId: createRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Create a new route
      requestBody:
        description: New route json
        x-body-name: route
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getRoutes
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Finds all routes
      responses:
        '200':
          description: Successfuly found all routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lužánky',
                    "points": [
                      {
                        "latitude": 49.204117,
                        "longitude": 16.606525,
                        "altitude": 400.25
                      }
                    ],
                    "stopIds": [1, 2, 3, 4]
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Update an existing route by ID
      requestBody:
        description: Route update json
        x-body-name: route
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route/{routeId}:
    get:
      operationId: getRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Finds route by ID
      parameters:
        - name: routeId
          in: path
          description: ID of route to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Delete a route
      parameters:
        - name: routeId
          in: path
          description: ID of route to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful route removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /stop:
    post:
      operationId: createStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Create a new stop
      requestBody:
        description: New stop json
        x-body-name: stop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stop'
        required: true
      responses:
        '200':
          description: Successful stop creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getStops
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Finds all stops
      responses:
        '200':
          description: Successfuly found all stops
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stop'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lidická',
                    "position": {
                      "latitude": 49.204117,
                      "longitude": 16.606525,
                      "altitude": 400.25
                    },
                    "notificationPhone": {"phone":'+420123456789'}
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Update an existing stop by ID
      requestBody:
        description: Stop update json
        x-body-name: stop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stop'
        required: true
      responses:
        '200':
          description: Successful stop update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /stop/{stopId}:
    get:
      operationId: getStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Finds stop by ID
      parameters:
        - name: stopId
          in: path
          description: ID of stop to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found stop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Delete a stop
      parameters:
        - name: stopId
          in: path
          description: ID of stop to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful stop removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
components:
  schemas:
    PlatformHwId:
      type: object
      description: PlatformHwId object structure
      required:
        - id
        - name
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        name:
          type: string
          example: 'ABCD1234EF56'
    Route:
      type: object
      description: Route object structure
      required:
        - id
        - name
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        name:
          type: string
          example: 'Lužánky'
        points:
          type: array
          default: []
          items:
            $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
          example:
            [
              {
                "latitude": 49.204117,
                "longitude": 16.606525,
                "altitude": 400.25
              }
            ]
        stopIds:
          type: array
          default: []
          items:
            type: integer
          example: [1, 2, 3, 4]
    Stop:
      type: object
      description: Stop object structure
      required:
        - id
        - name
        - position
      properties:
        id:
          $ref: 'common_models.yaml#/components/schemas/Id'
        name:
          type: string
          example: 'Lidická'
        position:
          $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
        notificationPhone:
          $ref: 'common_models.yaml#/components/schemas/MobilePhone'
