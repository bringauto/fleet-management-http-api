openapi: 3.0.0
info:
  title: BringAuto Fleet Management API
  description: Specification for BringAuto fleet backend HTTP API
  version: 1.0.0

servers:
  - url: /v1
    description: Local server

tags:
  - name: car
    description: Car related functions
  - name: carState
    description: Car state related functions
  - name: order
    description: Order related functions
  - name: platformHwId
    description: Platform hardware ID related functions
  - name: route
    description: Route state related functions
  - name: stop
    description: Stop state related functions
  - name: user
    description: User related functions
paths:
  /car:
    post:
      operationId: createCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Create a new car
      requestBody:
        x-body-name: car
        description: New car json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful car creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getCars
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Finds all cars
      responses:
        '200':
          description: Successfuly found all cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
              example:
                [
                  {
                    "id": 1,
                    "platformId": 1,
                    "name": 'BAT-2022-01',
                    "carAdminPhone": {"phone":'+420123456789'},
                    "defaultRouteId": 1,
                    "underTest": false
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Update an existing car by ID
      requestBody:
        description: Car update json
        x-body-name: car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful car update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /car/{carId}:
    get:
      operationId: getCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Finds car by ID
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car
      tags:
        - car
      summary: Delete a car
      parameters:
        - name: carId
          in: path
          description: ID of car to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful car removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /car/startstop/{carId}:
    get:
      operationId: startstopCar
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_startstop
      tags:
        - car
      summary: Start/stop car by ID (intended for phonecalls)
      parameters:
        - name: carId
          in: path
          description: ID of car to start/stop
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful car start/stop
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /carstate:
    post:
      operationId: addCarState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
      tags:
        - carState
      summary: Add a new state for a car by ID
      requestBody:
        description: Car state json
        x-body-name: carState
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarState'
        required: true
      responses:
        '200':
          description: Successfuly added car state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarState'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getAllCarStates
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
      tags:
        - carState
      summary: Finds all car states
      responses:
        '200':
          description: Successfuly found all car states
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CarState'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'

  /carstate/{carId}:
    get:
      operationId: getCarStates
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.car_state
      tags:
        - carState
      summary: Finds car states by ID
      parameters:
        - name: carId
          in: path
          description: ID of car for which states shall be returned
          required: true
          example: 1
          schema:
            type: integer
            format: int32
        - name: allAvailable
          in: query
          description: Whether to return all available car states or only the latest one
          required: false
          example: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successfuly found car state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarState'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /order:
    post:
      operationId: createOrder
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
      tags:
        - order
      summary: Create a new order
      requestBody:
        description: New order json
        x-body-name: order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful order creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getOrders
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
      tags:
        - order
      summary: Finds all orders
      responses:
        '200':
          description: Successfuly found all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              example:
                [
                  {
                    "id": 1,
                    "priority": "normal",
                    "userId": 1,
                    "status": "to_accept",
                    "carId": 1,
                    "targetStopId": 1,
                    "stopRouteId": 1,
                    "notificationPhone": {"phone":'+420123456789'}
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateOrder
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
      tags:
        - order
      summary: Update an existing order by ID
      requestBody:
        description: Order update json
        x-body-name: order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful order update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /order/{orderId}:
    get:
      operationId: getOrder
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
      tags:
        - order
      summary: Finds order by ID
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteOrder
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
      tags:
        - order
      summary: Delete an order
      parameters:
        - name: orderId
          in: path
          description: ID of order to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful order removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /order/wait/{carId}:
    get:
      operationId: getUpdatedOrders
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order
      tags:
        - order
      summary: Get order by car ID only if it changed
      parameters:
        - name: carId
          in: path
          description: ID of car with order to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly received new order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '408':
          $ref: 'errors.yaml#/components/responses/RequestTimeout'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /orderstate:
    post:
      operationId: createOrderState
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order_state
      tags:
        - order
      summary: Create a new order state
      requestBody:
        description: New order state json
        x-body-name: orderState
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderState'
        required: true
      responses:
        '200':
          description: Succesfully added new order state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderState'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getAllOrderStates
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order_state
      tags:
        - order
      summary: Finds all order states
      responses:
        '200':
          description: Successfuly found all order states
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderState'
              example:
                [
                  {
                    "id": 1,
                    "orderId": 1,
                    "status": "to_accept",
                    "carId": 1
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /orderstate/{orderId}:
    get:
      operationId: getOrderStates
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.order_state
      tags:
        - order
      summary: Finds order state by ID
      parameters:
        - name: orderId
          in: path
          description: ID of order for which states shall be returned
          required: true
          example: 1
          schema:
            type: integer
            format: int32
        - name: allAvailable
          in: query
          description: Whether to return all available order states or only the latest one
          required: false
          example: true
          schema:
            type: boolean
      responses:
        '200':
          description: Successfuly found order state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderState'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /platformhwid:
    post:
      operationId: createHwId
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Create a new platform hwId
      requestBody:
        description: Platform hardware ID json
        x-body-name: platformHwId
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformHwId'
        required: true
      responses:
        '200':
          description: Successful platform hardware ID creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHwId'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getHwIds
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Finds all platform hwIds
      responses:
        '200':
          description: Successfuly found all platform hardware IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlatformHwId'
              example:
                [
                  {
                    "id": 1,
                    "name": 'ABCD1234EF56'
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /platformhwid/{platformhwidId}:
    get:
      operationId: getHwId
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Finds platform hwId by ID
      parameters:
        - name: platformhwidId
          in: path
          description: ID of platform hwId to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found platform hardware ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHwId'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteHwId
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.platform_hwid
      tags:
        - platformHwId
      summary: Delete a platform hwId
      parameters:
        - name: platformhwidId
          in: path
          description: ID of platform hwId to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful platform hardware ID removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route:
    post:
      operationId: createRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Create a new route
      requestBody:
        description: New route json
        x-body-name: route
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getRoutes
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Finds all routes
      responses:
        '200':
          description: Successfuly found all routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lužánky',
                    "points": [
                      {
                        "latitude": 49.204117,
                        "longitude": 16.606525,
                        "altitude": 400.25
                      }
                    ],
                    "stopIds": [1, 2, 3, 4]
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Update an existing route by ID
      requestBody:
        description: Route update json
        x-body-name: route
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /route/{routeId}:
    get:
      operationId: getRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Finds route by ID
      parameters:
        - name: routeId
          in: path
          description: ID of route to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteRoute
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.route
      tags:
        - route
      summary: Delete a route
      parameters:
        - name: routeId
          in: path
          description: ID of route to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful route removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /stop:
    post:
      operationId: createStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Create a new stop
      requestBody:
        description: New stop json
        x-body-name: stop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stop'
        required: true
      responses:
        '200':
          description: Successful stop creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    get:
      operationId: getStops
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Finds all stops
      responses:
        '200':
          description: Successfuly found all stops
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stop'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lidická',
                    "position": {
                      "latitude": 49.204117,
                      "longitude": 16.606525,
                      "altitude": 400.25
                    },
                    "notificationPhone": {"phone":'+420123456789'}
                  }
                ]
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    put:
      operationId: updateStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Update an existing stop by ID
      requestBody:
        description: Stop update json
        x-body-name: stop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stop'
        required: true
      responses:
        '200':
          description: Successful stop update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
  /stop/{stopId}:
    get:
      operationId: getStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Finds stop by ID
      parameters:
        - name: stopId
          in: path
          description: ID of stop to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found stop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
    delete:
      operationId: deleteStop
      x-openapi-router-controller: fleet_management_api.api_impl.controllers.stop
      tags:
        - stop
      summary: Delete a stop
      parameters:
        - name: stopId
          in: path
          description: ID of stop to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful stop removal
        '400':
          $ref: 'errors.yaml#/components/responses/BadRequest'
        '401':
          $ref: 'errors.yaml#/components/responses/Unauthorized'
        '403':
          $ref: 'errors.yaml#/components/responses/Forbidden'
        '404':
          $ref: 'errors.yaml#/components/responses/NotFound'
        '405':
          $ref: 'errors.yaml#/components/responses/MethodNotAllowed'
        default:
          $ref: 'errors.yaml#/components/responses/UnexpectedError'
components:
  schemas:
    Car:
      type: object
      description: Car object structure
      required:
        - id
        - platformId
        - name
      properties:
        id:
          type: integer
          format: int32
          example: 1
        platformId:
          type: integer
          format: int32
          example: 5
        name:
          type: string
          example: 'BAT-2022-01'
        carAdminPhone:
          $ref: 'common_models.yaml#/components/schemas/MobilePhone'
        defaultRouteId:
          type: integer
          format: int32
          example: 1
        underTest:
          type: boolean
          default: true
          example: false
    CarState:
      type: object
      description: Car state object structure
      required:
        - id
        - status
        - carId
      properties:
        id:
          type: integer
          format: int32
          example: 1
        status:
          $ref: '#/components/schemas/CarStatus'
        fuel:
          type: integer
          format: int32
          default: 0
          example: 80
        carId:
          type: integer
          format: int32
          example: 1
        speed:
          type: number
          format: float
          default: 0.0
          example: 20.5
        position:
          $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
    Order:
      type: object
      description: Order object structure
      required:
        - id
        - userId
        - carId
        - targetStopId
        - stopRouteId
      properties:
        id:
          type: integer
          format: int32
          example: 1
        priority:
          $ref: "#/components/schemas/Priority"
        userId:
          type: integer
          format: int32
          example: 1
        carId:
          type: integer
          format: int32
          example: 1
        notification:
          type: string
          example: 'Order notification'
        targetStopId:
          type: integer
          format: int32
          example: 1
        stopRouteId:
          type: integer
          format: int32
          example: 1
        notificationPhone:
          $ref: 'common_models.yaml#/components/schemas/MobilePhone'
    OrderState:
      type: object
      description: Order state object structure
      required:
        - id
        - status
        - orderId
      properties:
        id:
          type: integer
          format: int32
          example: 1
        status:
          $ref: '#/components/schemas/OrderStatus'
        orderId:
          type: integer
          format: int32
          example: 1
    PlatformHwId:
      type: object
      description: PlatformHwId object structure
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'ABCD1234EF56'
    Route:
      type: object
      description: Route object structure
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'Lužánky'
        points:
          type: array
          default: []
          items:
            $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
          example:
            [
              {
                "latitude": 49.204117,
                "longitude": 16.606525,
                "altitude": 400.25
              }
            ]
        stopIds:
          type: array
          default: []
          items:
            type: integer
          example: [1, 2, 3, 4]
    Stop:
      type: object
      description: Stop object structure
      required:
        - id
        - name
        - position
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'Lidická'
        position:
          $ref: 'common_models.yaml#/components/schemas/GNSSPosition'
        notificationPhone:
          $ref: 'common_models.yaml#/components/schemas/MobilePhone'
    CarStatus:
      type: string
      description: CarStatus enum
      enum:
        - idle
        - charging
        - out_of_order
        - stopped_by_phone
      example: idle
    OrderStatus:
      type: string
      description: OrderStatus (to_accept, accepted, in_progress, done, canceled)
      enum:
        - to_accept
        - accepted
        - in_progress
        - done
        - canceled
      example: to_accept

    # OpenAPI Generator IGNORES default value when using enum. Using pattern matching instead.
    # The pattern is checked ONLY when the value is passed to the API, not when any of the objects below is created.
    Priority:
      type: string
      description: Priority (low, normal, high)
      pattern: ^(low|normal|high)$
      default: "normal"
