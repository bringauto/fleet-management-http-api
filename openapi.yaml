openapi: 3.0.0
info:
  title: BringAuto Fleet Management API
  description: Specification for BringAuto fleet backend HTTP API
  version: 1.0.0

servers:
  - url: /v1
    description: Local server

tags:
  - name: car
    description: Car related functions
  - name: carState
    description: Car state related functions
  - name: order
    description: Order related functions
  - name: platformHwId
    description: Platform hardware ID related functions
  - name: route
    description: Route state related functions
  - name: stop
    description: Stop state related functions
  - name: user
    description: User related functions
  - name: login
    description: Authentication related functions
security:
  - oAuth2AuthCode: []
paths:
  /login:
    get:
      x-openapi-router-controller: fleet_management_api.impl.controllers
      operationId: login
      security: []
      description:
        "Login using keycloak."
      tags:
        - login
      responses:
        '302':
          description: Redirect to keycloak authentication.
        '500':
          description: Login failed due to internal server error.

  /token_get:
    get:
      x-openapi-router-controller: fleet_management_api.impl.controllers
      operationId: token_get
      security: []
      description:
        "Callback endpoint for keycloak to receive jwt token."
      tags:
        - login
      responses:
        '200':
          description: Returns a standard keycloak token.
        '500':
          description: Login failed due to internal server error.
      parameters:
        - $ref: '#/components/parameters/kcState'
        - $ref: '#/components/parameters/kcSessionState'
        - $ref: '#/components/parameters/kcIss'
        - $ref: '#/components/parameters/kcCode'
      
  /token_refresh:
    get:
      x-openapi-router-controller: fleet_management_api.impl.controllers
      operationId: token_refresh
      security: []
      description:
        "Endpoint to receive jwt token from refresh token."
      tags:
        - login
      responses:
        '200':
          description: Returns a new standard keycloak token.
        '500':
          description: Token refresh failed due to internal server error.
      parameters:
        - $ref: '#/components/parameters/RefreshToken'

  /car:
    post:
      operationId: createCar
      x-openapi-router-controller: fleet_management_api.api_impl.car_controller
      tags:
        - car
      summary: Create a new car
      requestBody:
        x-body-name: car
        description: New car json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful car creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      operationId: getCars
      x-openapi-router-controller: fleet_management_api.api_impl.car_controller
      tags:
        - car
      summary: Finds all cars
      responses:
        '200':
          description: Successfuly found all cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
              example:
                [
                  {
                    "id": 1,
                    "platform_id": 1,
                    "name": 'BAT-2022-01',
                    "carAdminPhone": {"phone":'+420123456789'},
                    "defaultRouteId": 1,
                    "underTest": false
                  }
                ]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: updateCar
      x-openapi-router-controller: fleet_management_api.api_impl.car_controller
      tags:
        - car
      summary: Update an existing car by ID
      requestBody:
        description: Car update json
        x-body-name: car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful car update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /car/{carId}:
    get:
      operationId: getCar
      x-openapi-router-controller: fleet_management_api.api_impl.car_controller
      tags:
        - car
      summary: Finds car by ID
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: deleteCar
      x-openapi-router-controller: fleet_management_api.api_impl.car_controller
      tags:
        - car
      summary: Delete a car
      parameters:
        - name: carId
          in: path
          description: ID of car to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful car removal
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /car/startstop/{carId}:
    get:
      operationId: startstopCar
      tags:
        - car
      summary: Start/stop car by ID (intended for phonecalls)
      parameters:
        - name: carId
          in: path
          description: ID of car to start/stop
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful car start/stop
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /carstate:
    post:
      operationId: addCarState
      tags:
        - carState
      summary: Add a new state for a car by ID
      requestBody:
        description: Car state json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarState'
        required: true
      responses:
        '200':
          description: Successfuly added car state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarState'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /order:
    post:
      operationId: createOrder
      tags:
        - order
      summary: Create a new order
      requestBody:
        description: New order json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful order creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      operationId: getOrders
      tags:
        - order
      summary: Finds all orders
      responses:
        '200':
          description: Successfuly found all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              example:
                [
                  {
                    "id": 1,
                    "priority": "normal",
                    "userId": 1,
                    "status": "to_accept",
                    "carId": 1,
                    "targetStop": 1,
                    "stopRoute": 1,
                    "notificationPhone": {"phone":'+420123456789'}
                  }
                ]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: updateOrder
      tags:
        - order
      summary: Update an existing order by ID
      requestBody:
        description: Order update json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful order update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /order/{orderId}:
    get:
      operationId: getOrder
      tags:
        - order
      summary: Finds order by ID
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: deleteOrder
      tags:
        - order
      summary: Delete an order
      parameters:
        - name: orderId
          in: path
          description: ID of order to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful order removal
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /order/wait/{carId}:
    get:
      operationId: getOrderWait
      tags:
        - order
      summary: Get order by car ID only if it changed
      parameters:
        - name: carId
          in: path
          description: ID of car with order to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly received new order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '408':
          $ref: '#/components/responses/RequestTimeout'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /platformhwid:
    post:
      operationId: createHwId
      tags:
        - platformHwId
      summary: Create a new platform hwId
      requestBody:
        description: Platform hardware ID json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformHwId'
        required: true
      responses:
        '200':
          description: Successful platform hardware ID creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHwId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      operationId: getHwIds
      tags:
        - platformHwId
      summary: Finds all platform hwIds
      responses:
        '200':
          description: Successfuly found all platform hardware IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlatformHwId'
              example:
                [
                  {
                    "id": 1,
                    "name": 'ABCD1234EF56'
                  }
                ]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /platformhwid/{platformhwidId}:
    get:
      operationId: getHwId
      tags:
        - platformHwId
      summary: Finds platform hwId by ID
      parameters:
        - name: platformhwidId
          in: path
          description: ID of platform hwId to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found platform hardware ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformHwId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: deleteHwId
      tags:
        - platformHwId
      summary: Delete a platform hwId
      parameters:
        - name: platformhwidId
          in: path
          description: ID of platform hwId to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful platform hardware ID removal
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /route:
    post:
      operationId: createRoute
      tags:
        - route
      summary: Create a new route
      requestBody:
        description: New route json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      operationId: getRoutes
      tags:
        - route
      summary: Finds all routes
      responses:
        '200':
          description: Successfuly found all routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lužánky',
                    "points": [
                      {
                        "latitude": 49.204117,
                        "longitude": 16.606525,
                        "altitude": 400.25
                      }
                    ],
                    "stopIds": [1, 2, 3, 4]
                  }
                ]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: updateRoute
      tags:
        - route
      summary: Update an existing route by ID
      requestBody:
        description: Route update json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        '200':
          description: Successful route update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /route/{routeId}:
    get:
      operationId: getRoute
      tags:
        - route
      summary: Finds route by ID
      parameters:
        - name: routeId
          in: path
          description: ID of route to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found route
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: deleteRoute
      tags:
        - route
      summary: Delete a route
      parameters:
        - name: routeId
          in: path
          description: ID of route to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful route removal
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /stop:
    post:
      operationId: createStop
      tags:
        - stop
      summary: Create a new stop
      requestBody:
        description: New stop json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stop'
        required: true
      responses:
        '200':
          description: Successful stop creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      operationId: getStops
      tags:
        - stop
      summary: Finds all stops
      responses:
        '200':
          description: Successfuly found all stops
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stop'
              example:
                [
                  {
                    "id": 1,
                    "name": 'Lidická',
                    "position": {
                      "latitude": 49.204117,
                      "longitude": 16.606525,
                      "altitude": 400.25
                    },
                    "notificationPhone": {"phone":'+420123456789'}
                  }
                ]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: updateStop
      tags:
        - stop
      summary: Update an existing stop by ID
      requestBody:
        description: Stop update json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stop'
        required: true
      responses:
        '200':
          description: Successful stop update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /stop/{stopId}:
    get:
      operationId: getStop
      tags:
        - stop
      summary: Finds stop by ID
      parameters:
        - name: stopId
          in: path
          description: ID of stop to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found stop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stop'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: deleteStop
      tags:
        - stop
      summary: Delete a stop
      parameters:
        - name: stopId
          in: path
          description: ID of stop to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful stop removal
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /user:
    post:
      operationId: createUser
      tags:
        - user
      summary: Create a new user
      requestBody:
        description: New user json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful user creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      operationId: getUsers
      tags:
        - user
      summary: Finds all users
      responses:
        '200':
          description: Successfuly found all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                [
                  {
                    "id": 1,
                    "email": 'bringauto@bringauto.com',
                    "userName": 'Admin',
                    "password": 'abcd'
                  }
                ]
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      operationId: updateUser
      tags:
        - user
      summary: Update an existing user by ID
      requestBody:
        description: User update json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful user update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /user/{userId}:
    get:
      operationId: getUser
      tags:
        - user
      summary: Finds user by ID
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successfuly found user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
    delete:
      operationId: deleteUser
      tags:
        - user
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          example: 1
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful user removal
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  securitySchemes:
    oAuth2AuthCode:
      type: oauth2
      description: oAuth2 authorization
      flows: 
        authorizationCode:
          authorizationUrl: https://keycloak.bringauto.com/realms/bringauto/protocol/openid-connect/auth
          tokenUrl: https://keycloak.bringauto.com/realms/bringauto/protocol/openid-connect/token
          refreshUrl: https://keycloak.bringauto.com/realms/bringauto/protocol/openid-connect/token
          scopes: {}

  parameters:
    kcState:
      name: state
      description: State returned by keycloak authentication.
      in: query
      required: false
      schema:
        type: string
      example: your_state_info

    kcSessionState:
      name: session_state
      description: Session state returned by keycloak authentication.
      in: query
      required: false
      schema:
        type: string
      example: 167e141d-2f55-4d...

    kcIss:
      name: iss
      description: Code issuer returned by keycloak authentication.
      in: query
      required: false
      schema:
        type: string
      example: http%3A%2F%2Flocalhost%3A8081%2Frealms%2Fmaster

    kcCode:
      name: code
      description: Code used for jwt token generation returned by keycloak authentication.
      in: query
      required: false
      schema:
        type: string
      example: 5dea27d2-4b2d-48...

    RefreshToken:
      name: refresh_token
      description: Refresh token used for jwt token generation.
      in: query
      required: true
      schema:
        type: string
      example: eyJhbGciOiJIUzI1NiIsI...

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              value:
                code: '400'
                message: 'Bad request'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              value:
                code: '401'
                message: 'Unauthorized'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              value:
                code: '403'
                message: 'Request forbidden'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              value:
                code: '404'
                message: 'Resource not found'
    MethodNotAllowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              value:
                code: '405'
                message: 'Method not allowed'
    RequestTimeout:
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              value:
                code: '408'
                message: 'Request timeout'
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            error:
              value:
                code: '500'
                message: 'Unexpected error'
  schemas:
    Car:
      type: object
      description: Car object structure
      required:
        - id
        - platform_id
        - name
      properties:
        id:
          type: integer
          format: int32
          example: 1
        platform_id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'BAT-2022-01'
        carAdminPhone:
          $ref: '#/components/schemas/MobilePhone'
        defaultRouteId:
          type: integer
          format: int32
          example: 1
        underTest:
          type: boolean
          default: true
    CarState:
      type: object
      description: Car state object structure
      required:
        - id
        - status
        - carId
      properties:
        id:
          type: integer
          format: int32
          example: 1
        status:
          $ref: '#/components/schemas/CarStatus'
        fuel:
          type: integer
          format: int32
          example: 80
        carId:
          type: integer
          format: int32
          example: 1
        speed:
          type: number
          format: float
          example: 20.5
        position:
          $ref: '#/components/schemas/GNSSPosition'
    Error:
      type: object
      description: Error object structure
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: 'Not found'
      required:
        - code
        - message
    Order:
      type: object
      description: Order object structure
      required:
        - id
        - userId
        - carId
        - targetStop
        - stopRoute
      properties:
        id:
          type: integer
          format: int32
          example: 1
        priority:
          $ref: '#/components/schemas/Priority'
        userId:
          type: integer
          format: int32
          example: 1
        status:
          $ref: '#/components/schemas/OrderStatus'
        carId:
          type: integer
          format: int32
          example: 1
        targetStopId:
          type: integer
          format: int32
          example: 1
        stopRouteId:
          type: integer
          format: int32
          example: 1
        notificationPhone:
          $ref: '#/components/schemas/MobilePhone'
    PlatformHwId:
      type: object
      description: PlatformHwId object structure
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'ABCD1234EF56'
    Route:
      type: object
      description: Route object structure
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'Lužánky'
        points:
          type: array
          items:
            $ref: '#/components/schemas/GNSSPosition'
          example:
            [
              {
                "latitude": 49.204117,
                "longitude": 16.606525,
                "altitude": 400.25
              }
            ]
        stopIds:
          type: array
          items:
            type: integer
          example: [1, 2, 3, 4]
    Stop:
      type: object
      description: Stop object structure
      required:
        - id
        - name
        - position
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: 'Lidická'
        position:
          $ref: '#/components/schemas/GNSSPosition'
        notificationPhone:
          $ref: '#/components/schemas/MobilePhone'
    User:
      type: object
      description: User object structure
      required:
        - id
        - email
        - userName
        - password
      properties:
        id:
          type: integer
          format: int32
          example: 1
        email:
          type: string
          example: 'bringauto@bringauto.com'
          format: email
        userName:
          type: string
          example: 'Admin'
        password:
          type: string
          example: 'Admin1'
          format: password
    CarStatus:
      type: string
      description: CarStatus enum
      enum:
        - idle
        - charging
        - out_of_order
        - stopped_by_phone
    OrderStatus:
      type: string
      description: OrderStatus enum
      enum:
        - to_accept
        - accepted
        - in_progress
        - done
        - canceled
    Priority:
      type: string
      description: Priority enum
      enum:
        - low
        - normal
        - high
    GNSSPosition:
      type: object
      description: GNSSPosition primitive structure
      properties:
        latitude:
          type: number
          format: float
          example: 49.204117
        longitude:
          type: number
          format: float
          example: 16.606525
        altitude:
          type: number
          format: float
          example: 400.25
    MobilePhone:
      type: object
      description: MobilePhone Primitive structure
      properties:
        phone:
          type: string
          example: '+420123456789'
